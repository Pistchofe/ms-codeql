<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>Code that passes user input directly to
<code>Invoke-Expression</code>, <code>&</code>, or some other library
routine that executes a command, allows the user to execute malicious
code.</p>

<p>This is a port of the InjectionHunter tool by Lee Holmes, and checks when user input is passed to any of the following:</p>
<ul>
  <li>Invoke-Expression</li>
  <li>InvokeScript</li>
  <li>CreateNestedPipeline</li>
  <li>AddScript</li>
  <li>powershell</li>
  <li>cmd</li>
  <li>Foreach-Object</li>
  <li>Invoke</li>
  <li>CreateScriptBlock</li>
  <li>NewScriptBlock</li>
  <li>ExpandString</li>
</ul>

</overview>
<recommendation>

<p>Possible script injection risk. Untrusted input can cause arbitrary PowerShell expressions to be run. 
Variables may be used directly for dynamic parameter arguments, splatting can be used for dynamic parameter names, 
and the invocation operator can be used for dynamic command names. If content escaping is truly needed, PowerShell has several valid quote characters, 
so  [System.Management.Automation.Language.CodeGeneration]::Escape* should be used.</p>

</recommendation>

<references>

<li>
OWASP:
<a href="https://www.owasp.org/index.php/Command_Injection">Command Injection</a>.
</li>
<li>
Injection Hunter:
<a href="https://devblogs.microsoft.com/powershell/powershell-injection-hunter-security-auditing-for-powershell-scripts/">PowerShell Injection Hunter: Security Auditing for PowerShell Scripts</a>.
</li>

</references>
</qhelp>
