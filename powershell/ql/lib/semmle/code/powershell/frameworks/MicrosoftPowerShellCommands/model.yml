extensions:
  - addsTo:
      pack: microsoft/powershell-all
      extensible: typeModel
    data:
    - ["system.string", "microsoft.powershell.commands.enhancedkeyusagerepresentation", "Method[tostring].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setitemcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[showsecuritydescriptorui]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[storageserveredition]"]
    - ["system.string", "microsoft.powershell.commands.teeobjectcommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[offline]"]
    - ["system.string[]", "microsoft.powershell.commands.getmodulecommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.psrunspacecmdlet!", "Member[vmidinstanceidparameterset]"]
    - ["system.version", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[moduleversion]"]
    - ["system.guid", "microsoft.powershell.commands.enterpssessioncommand", "Member[vmid]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.computerinfo", "Member[windowsubr]"]
    - ["system.string[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[vmname]"]
    - ["system.management.automation.runspaces.psthreadoptions", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[threadoptions]"]
    - ["system.string", "microsoft.powershell.commands.setvariablecommand", "Member[description]"]
    - ["system.string[]", "microsoft.powershell.commands.contentcommandbase", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.memberdefinition", "Member[typename]"]
    - ["system.nullable<microsoft.powershell.commands.powerplatformrole>", "microsoft.powershell.commands.computerinfo", "Member[powerplatformrole]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[nomachineprofile]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addcomputercommand", "Member[unsecure]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.addcomputercommand", "Member[options]"]
    - ["system.collections.generic.hashset<system.string>", "microsoft.powershell.commands.modulecmdletbase!", "Member[builtinmodules]"]
    - ["system.int16", "microsoft.powershell.commands.restartcomputercommand", "Member[delay]"]
    - ["system.management.automation.containerparentjob", "microsoft.powershell.commands.importworkflowcommand!", "Method[startworkflowapplication].ReturnValue"]
    - ["system.management.automation.remoting.proxyaccesstype", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[proxyaccesstype]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.textmeasureinfo", "Member[characters]"]
    - ["system.object", "microsoft.powershell.commands.sessionstateproviderbase", "Method[clearcontentdynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.foreachobjectcommand", "Member[asjob]"]
    - ["system.string[]", "microsoft.powershell.commands.splitpathcommand", "Member[literalpath]"]
    - ["system.object[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[visiblefunctions]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[pcipme]"]
    - ["system.management.automation.commandtypes", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[commandtype]"]
    - ["system.string[]", "microsoft.powershell.commands.clearitemcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csdomain]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.poplocationcommand", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.whereobjectcommand", "Member[property]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csprimaryownercontact]"]
    - ["system.string", "microsoft.powershell.commands.receivepssessioncommand", "Member[certificatethumbprint]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.converttoxmlcommand", "Member[inputobject]"]
    - ["system.object", "microsoft.powershell.commands.aliasprovider", "Method[setitemdynamicparameters].ReturnValue"]
    - ["system.uri[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[connectionuri]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommandbase", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[author]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitemcommand", "Member[exclude]"]
    - ["system.string", "microsoft.powershell.commands.enhancedkeyusagerepresentation", "Member[objectid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addtypecommandbase", "Member[passthru]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[scoopenserver]"]
    - ["system.int32[]", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[line]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[releasenotes]"]
    - ["system.string", "microsoft.powershell.commands.newservicecommand", "Member[displayname]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[palmpilot]"]
    - ["system.management.automation.runspaces.pssession", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[session]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider", "Method[normalizerelativepath].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[filelist]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[outfile]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[scriptstoprocess]"]
    - ["system.int32", "microsoft.powershell.commands.enterpshostprocesscommand", "Member[id]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[noqualifier]"]
    - ["microsoft.powershell.commands.deviceguardsmartstatus", "microsoft.powershell.commands.deviceguardsmartstatus!", "Member[running]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportcountercommand", "Member[force]"]
    - ["system.object", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[privatedata]"]
    - ["system.nullable<microsoft.powershell.commands.processortype>", "microsoft.powershell.commands.processor", "Member[processortype]"]
    - ["system.string[]", "microsoft.powershell.commands.getvariablecommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.contentcommandbase", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addcomputercommand", "Member[force]"]
    - ["system.int32", "microsoft.powershell.commands.newtimespancommand", "Member[hours]"]
    - ["system.string", "microsoft.powershell.commands.exportpssessioncommand", "Member[encoding]"]
    - ["system.string", "microsoft.powershell.commands.sendmailmessage", "Member[subject]"]
    - ["system.string[]", "microsoft.powershell.commands.stopcomputercommand", "Member[computername]"]
    - ["microsoft.powershell.commands.webrequestsession", "microsoft.powershell.commands.webrequestpscmdlet", "Member[websession]"]
    - ["system.string[]", "microsoft.powershell.commands.convertfrommarkdowncommand", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cmatch]"]
    - ["system.string[]", "microsoft.powershell.commands.neweventlogcommand", "Member[computername]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[unspecified]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[removepropertydynamicparameters].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.updatetypedatacommand", "Member[typename]"]
    - ["microsoft.powershell.commands.producttype", "microsoft.powershell.commands.producttype!", "Member[unknown]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.measurecommandcommand", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessioncommand", "Member[usewindowspowershell]"]
    - ["system.string", "microsoft.powershell.commands.neweventlogcommand", "Member[categoryresourcefile]"]
    - ["system.diagnostics.process[]", "microsoft.powershell.commands.stopprocesscommand", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[skipeditioncheck]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[tags]"]
    - ["system.string", "microsoft.powershell.commands.newmodulecommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[noproxy]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.settracesourcecommand", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getsddl].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.removevariablecommand", "Member[include]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.receivejobcommand", "Member[session]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.startjobcommand", "Member[authentication]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[communicationsserver]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[couldnotparseaspowershelldatafile]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[delay]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getitemcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[skipcacheck]"]
    - ["system.string", "microsoft.powershell.commands.getdatecommand", "Member[uformat]"]
    - ["system.string", "microsoft.powershell.commands.settracesourcecommand", "Member[filepath]"]
    - ["system.string", "microsoft.powershell.commands.stopcomputercommand", "Member[protocol]"]
    - ["system.string", "microsoft.powershell.commands.geteventpssnapin", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.webresponseobject", "Member[statusdescription]"]
    - ["system.string", "microsoft.powershell.commands.psuseragent!", "Member[internetexplorer]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[formathextypenotsupported]"]
    - ["microsoft.powershell.commands.domainrole", "microsoft.powershell.commands.domainrole!", "Member[backupdomaincontroller]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csautomaticmanagedpagefile]"]
    - ["system.string", "microsoft.powershell.commands.commonrunspacecommandbase!", "Member[runspaceinstanceidparameterset]"]
    - ["system.string", "microsoft.powershell.commands.exportconsolecommand", "Member[path]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[biosprimarybios]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.tracecommandcommand", "Member[debugger]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[fullpower]"]
    - ["system.string[]", "microsoft.powershell.commands.resolvepathcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.hotfix", "Member[hotfixid]"]
    - ["system.int32", "microsoft.powershell.commands.invokecommandcommand", "Member[port]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[computeclusteredition]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powercycle]"]
    - ["system.char", "microsoft.powershell.commands.registryprovider", "Member[altitemseparator]"]
    - ["system.string[]", "microsoft.powershell.commands.importmodulecommand", "Member[function]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[typestoprocess]"]
    - ["microsoft.powershell.commands.deviceguardsmartstatus", "microsoft.powershell.commands.deviceguardsmartstatus!", "Member[configured]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[unspecified]"]
    - ["system.string", "microsoft.powershell.commands.protectcmsmessagecommand", "Member[outfile]"]
    - ["system.string", "microsoft.powershell.commands.historyinfo", "Member[commandline]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.objectcmdletbase", "Member[casesensitive]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Method[toemphasizedstring].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[activityprocessidletimeoutsec]"]
    - ["system.security.securestring", "microsoft.powershell.commands.getpfxcertificatecommand", "Member[password]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.removecomputercommand", "Member[localcredential]"]
    - ["system.string[]", "microsoft.powershell.commands.getitemcommand", "Member[exclude]"]
    - ["system.collections.arraylist", "microsoft.powershell.commands.groupinfo", "Member[values]"]
    - ["microsoft.powershell.commands.adminpasswordstatus", "microsoft.powershell.commands.adminpasswordstatus!", "Member[enabled]"]
    - ["microsoft.powershell.commands.foregroundapplicationboost", "microsoft.powershell.commands.foregroundapplicationboost!", "Member[none]"]
    - ["system.string", "microsoft.powershell.commands.exportcountercommand", "Member[fileformat]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[merge]"]
    - ["system.string", "microsoft.powershell.commands.selectxmlinfo", "Member[path]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[repeat]"]
    - ["system.string", "microsoft.powershell.commands.selectstringcommand", "Member[culture]"]
    - ["system.string[]", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[commandname]"]
    - ["system.serviceprocess.servicestartmode", "microsoft.powershell.commands.setservicecommand", "Member[startuptype]"]
    - ["system.object", "microsoft.powershell.commands.webrequestpscmdlet", "Member[body]"]
    - ["system.management.automation.errorcategory", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[category]"]
    - ["system.nullable<system.int16>", "microsoft.powershell.commands.computerinfo", "Member[csresetcount]"]
    - ["system.nullable<microsoft.powershell.commands.resetcapability>", "microsoft.powershell.commands.computerinfo", "Member[csresetcapability]"]
    - ["system.string", "microsoft.powershell.commands.geteventsubscribercommand", "Member[sourceidentifier]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[businessnedition]"]
    - ["system.object", "microsoft.powershell.commands.certificateprovider", "Method[removeitemdynamicparameters].ReturnValue"]
    - ["system.collections.generic.dictionary<system.string,system.string>", "microsoft.powershell.commands.webrequestsession", "Member[headers]"]
    - ["system.string[]", "microsoft.powershell.commands.getpssessionconfigurationcommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.selectxmlcommand", "Member[xpath]"]
    - ["microsoft.powershell.commands.processortype", "microsoft.powershell.commands.processortype!", "Member[centralprocessor]"]
    - ["system.collections.hashtable[]", "microsoft.powershell.commands.invokecommandcommand", "Member[sshconnection]"]
    - ["microsoft.powershell.commands.outputassemblytype", "microsoft.powershell.commands.addtypecommand", "Member[outputtype]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[usingnamespace]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.waitprocesscommand", "Member[passthru]"]
    - ["system.collections.generic.ienumerable<system.management.automation.completionresult>", "microsoft.powershell.commands.nounargumentcompleter", "Method[completeargument].ReturnValue"]
    - ["microsoft.powershell.commands.pshostprocessinfo", "microsoft.powershell.commands.enterpshostprocesscommand", "Member[hostprocessinfo]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getrandomcommandbase", "Member[shuffle]"]
    - ["system.string", "microsoft.powershell.commands.receivepssessioncommand", "Member[computername]"]
    - ["system.string[]", "microsoft.powershell.commands.getwineventcommand", "Member[listlog]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.writealiascommandbase", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.securitydescriptorcommandsbase", "Member[include]"]
    - ["system.string[]", "microsoft.powershell.commands.validateculturenamesgenerator", "Method[system.management.automation.ivalidatesetvaluesgenerator.getvalidvalues].ReturnValue"]
    - ["system.boolean", "microsoft.powershell.commands.corecommandbase", "Member[providersupportsshouldprocess]"]
    - ["system.string[]", "microsoft.powershell.commands.suspendjobcommand", "Member[command]"]
    - ["microsoft.powershell.commands.clipboardformat", "microsoft.powershell.commands.clipboardformat!", "Member[image]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[visibleexternalcommands]"]
    - ["microsoft.powershell.commands.websslprotocol", "microsoft.powershell.commands.websslprotocol!", "Member[tls11]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.teeobjectcommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.setwmiinstance", "Member[path]"]
    - ["system.timespan", "microsoft.powershell.commands.historyinfo", "Member[duration]"]
    - ["system.string[]", "microsoft.powershell.commands.converttohtmlcommand", "Member[precontent]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[isabsolute]"]
    - ["system.string", "microsoft.powershell.commands.getcmsmessagecommand", "Member[content]"]
    - ["system.consolecolor", "microsoft.powershell.commands.consolecolorcmdlet", "Member[foregroundcolor]"]
    - ["system.string", "microsoft.powershell.commands.receivepssessioncommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[script]"]
    - ["system.int32", "microsoft.powershell.commands.starttransactioncommand", "Member[timeout]"]
    - ["system.string[]", "microsoft.powershell.commands.selectstringcommand", "Member[include]"]
    - ["microsoft.powershell.commands.sessionfilterstate", "microsoft.powershell.commands.sessionfilterstate!", "Member[opened]"]
    - ["microsoft.powershell.commands.frontpanelresetstatus", "microsoft.powershell.commands.frontpanelresetstatus!", "Member[unknown]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[usebasicparsing]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.webrequestpscmdlet", "Member[headers]"]
    - ["system.string", "microsoft.powershell.commands.getitemcommand", "Member[filter]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.registerwmieventcommand", "Member[credential]"]
    - ["system.string[]", "microsoft.powershell.commands.validatematchstringculturenamesgenerator", "Method[system.management.automation.ivalidatesetvaluesgenerator.getvalidvalues].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[standarddeviation]"]
    - ["system.object", "microsoft.powershell.commands.addmembercommand", "Member[secondvalue]"]
    - ["system.object[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[modulelist]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[windowsinstalldatefromregistry]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[aliasestoexport]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[windows2000]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[enabled]"]
    - ["system.management.automation.runspaces.runspace[]", "microsoft.powershell.commands.commonrunspacecommandbase", "Member[runspace]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.converttohtmlcommand", "Member[as]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[variablestoexport]"]
    - ["system.string", "microsoft.powershell.commands.enablepssessionconfigurationcommand", "Member[securitydescriptorsddl]"]
    - ["system.diagnostics.process[]", "microsoft.powershell.commands.getpshostprocessinfocommand", "Member[process]"]
    - ["microsoft.powershell.commands.foregroundapplicationboost", "microsoft.powershell.commands.foregroundapplicationboost!", "Member[minimum]"]
    - ["system.int32", "microsoft.powershell.commands.writeeventlogcommand", "Member[eventid]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[javavm]"]
    - ["system.int32", "microsoft.powershell.commands.sortobjectcommand", "Member[top]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageworkgroupserveredition]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestpscmdlet", "Member[maximumretrycount]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivepssessioncommand", "Member[usessl]"]
    - ["system.string", "microsoft.powershell.commands.newwebserviceproxy", "Member[class]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[slate]"]
    - ["system.string[]", "microsoft.powershell.commands.getitempropertycommand", "Member[name]"]
    - ["system.collections.generic.list<microsoft.powershell.commands.dnsnamerepresentation>", "microsoft.powershell.commands.dnsnameproperty", "Member[dnsnamelist]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsdrivecommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.setitemcommand", "Member[path]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.textmeasureinfo", "Member[lines]"]
    - ["system.string[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[computername]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.testcomputersecurechannelcommand", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[recommendedaction]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[unicode]"]
    - ["system.string[]", "microsoft.powershell.commands.getcommandcommand", "Member[verb]"]
    - ["system.string[]", "microsoft.powershell.commands.cleareventlogcommand", "Member[computername]"]
    - ["system.int32", "microsoft.powershell.commands.getjobcommand", "Member[newest]"]
    - ["microsoft.powershell.commands.servicestartuptype", "microsoft.powershell.commands.servicestartuptype!", "Member[automaticdelayedstart]"]
    - ["microsoft.powershell.commands.processortype", "microsoft.powershell.commands.processortype!", "Member[dspprocessor]"]
    - ["system.string", "microsoft.powershell.commands.controlpanelitem", "Member[description]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[remotenodesessionidletimeoutsec]"]
    - ["system.object[]", "microsoft.powershell.commands.writecontentcommandbase", "Member[value]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[osmuilanguages]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[powerstatesettable]"]
    - ["system.string", "microsoft.powershell.commands.registerwmieventcommand", "Method[getsourceobjecteventname].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outfilecommand", "Member[nonewline]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.converttohtmlcommand", "Member[inputobject]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[buffersize]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[unknown]"]
    - ["system.int32", "microsoft.powershell.commands.wmibasecmdlet", "Member[throttlelimit]"]
    - ["system.string[]", "microsoft.powershell.commands.updatedata", "Member[appendpath]"]
    - ["system.collections.idictionary[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[aliasdefinitions]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.whereobjectcommand", "Member[filterscript]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.formathex", "Member[raw]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.enterpssessioncommand", "Member[options]"]
    - ["microsoft.powershell.commands.deviceguardsoftwaresecure[]", "microsoft.powershell.commands.computerinfo", "Member[deviceguardsecurityservicesconfigured]"]
    - ["system.serviceprocess.servicestartmode", "microsoft.powershell.commands.newservicecommand", "Member[startuptype]"]
    - ["system.guid[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[vmid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[average]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[tcpport]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportaliascommand", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.addcomputercommand", "Member[computername]"]
    - ["system.string[]", "microsoft.powershell.commands.removepssessioncommand", "Member[vmname]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csinfraredsupported]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet", "Member[configurationname]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsiotcore]"]
    - ["system.string[]", "microsoft.powershell.commands.gettimezonecommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[nonewscope]"]
    - ["microsoft.powershell.commands.getcounter.performancecountersampleset[]", "microsoft.powershell.commands.exportcountercommand", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getchilditemcommand", "Member[recurse]"]
    - ["microsoft.powershell.commands.processortype", "microsoft.powershell.commands.processortype!", "Member[videoprocessor]"]
    - ["microsoft.powershell.commands.dataexecutionpreventionsupportpolicy", "microsoft.powershell.commands.dataexecutionpreventionsupportpolicy!", "Member[optin]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosversion]"]
    - ["microsoft.powershell.commands.deviceguardconfigcodeintegritystatus", "microsoft.powershell.commands.deviceguardconfigcodeintegritystatus!", "Member[auditmode]"]
    - ["system.string", "microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[resolvedtarget].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.bytecollection", "Member[path]"]
    - ["system.object[]", "microsoft.powershell.commands.modulecmdletbase", "Member[baseargumentlist]"]
    - ["system.guid[]", "microsoft.powershell.commands.startjobcommand", "Member[vmid]"]
    - ["system.string[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[vmname]"]
    - ["system.object", "microsoft.powershell.commands.jsonobject!", "Method[convertfromjson].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[defaultpowershellremoteshellappname]"]
    - ["system.string", "microsoft.powershell.commands.helpnotfoundexception", "Member[helptopic]"]
    - ["system.int32", "microsoft.powershell.commands.invokecommandcommand", "Member[throttlelimit]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[newpropertydynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[notin]"]
    - ["system.string", "microsoft.powershell.commands.importaliascommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider!", "Member[providername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.clearhistorycommand", "Member[newest]"]
    - ["system.uri", "microsoft.powershell.commands.converttohtmlcommand", "Member[cssuri]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[powercycle]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osdataexecutionpreventiondrivers]"]
    - ["system.string[]", "microsoft.powershell.commands.showmarkdowncommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.moveitemcommand", "Member[include]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.starttranscriptcommand", "Member[append]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectobjectcommand", "Member[wait]"]
    - ["system.string", "microsoft.powershell.commands.outgridviewcommand", "Member[title]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getwineventcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startjobcommand", "Member[enablenetworkaccess]"]
    - ["system.string", "microsoft.powershell.commands.certificateprovider", "Method[getparentpath].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.copyitemcommand", "Member[exclude]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getservicecommand", "Member[dependentservices]"]
    - ["system.int32[]", "microsoft.powershell.commands.getprocesscommand", "Member[id]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[homepremiumedition]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[typestoprocess]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[secureboot]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.computerinfo", "Member[osnumberofusers]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removeitempropertycommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[hidecomputername]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosname]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[maximumreceivedobjectsize]"]
    - ["system.object[]", "microsoft.powershell.commands.updatelistcommand", "Member[remove]"]
    - ["microsoft.powershell.commands.osencryptionlevel", "microsoft.powershell.commands.osencryptionlevel!", "Member[encryptnbits]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[maximum]"]
    - ["microsoft.powershell.commands.deviceguardconfigcodeintegritystatus", "microsoft.powershell.commands.deviceguardconfigcodeintegritystatus!", "Member[off]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[os_390]"]
    - ["system.string[]", "microsoft.powershell.commands.gethelpcommand", "Member[role]"]
    - ["system.nullable<system.int16>", "microsoft.powershell.commands.computerinfo", "Member[csresetlimit]"]
    - ["system.uri", "microsoft.powershell.commands.webrequestpscmdlet", "Member[uri]"]
    - ["system.collections.generic.dictionary<system.string,system.string>", "microsoft.powershell.commands.webresponseobject", "Member[headers]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addpssnapincommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setstrictmodecommand", "Member[off]"]
    - ["system.version", "microsoft.powershell.commands.setstrictmodecommand", "Member[version]"]
    - ["system.management.automation.psobject[]", "microsoft.powershell.commands.addhistorycommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.unregisterpssessionconfigurationcommand", "Member[name]"]
    - ["system.boolean", "microsoft.powershell.commands.invokeitemcommand", "Member[providersupportsshouldprocess]"]
    - ["system.string[]", "microsoft.powershell.commands.removeeventlogcommand", "Member[logname]"]
    - ["system.string", "microsoft.powershell.commands.dnsnamerepresentation", "Member[unicode]"]
    - ["system.xml.xmlnode", "microsoft.powershell.commands.selectxmlinfo", "Member[node]"]
    - ["microsoft.powershell.commands.cpustatus", "microsoft.powershell.commands.cpustatus!", "Member[enabled]"]
    - ["system.string", "microsoft.powershell.commands.hotfix", "Member[installedon]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[itemexistsdynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.renamecomputercommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.updatetypedatacommand", "Member[propertyserializationset]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet", "Method[resolvecomputername].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.geteventpssnapin", "Member[types]"]
    - ["system.int32", "microsoft.powershell.commands.unregistereventcommand", "Member[subscriptionid]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.filesystemitemproviderdynamicparameters", "Member[olderthan]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.getuniquecommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommand", "Member[outputassembly]"]
    - ["system.string[]", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[module]"]
    - ["system.string", "microsoft.powershell.commands.convertfromjsoncommand", "Member[inputobject]"]
    - ["system.object", "microsoft.powershell.commands.formatwidecommand", "Member[property]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[lanremote]"]
    - ["system.string[]", "microsoft.powershell.commands.clearvariablecommand", "Member[include]"]
    - ["system.nullable<system.int16>", "microsoft.powershell.commands.computerinfo", "Member[biosembeddedcontrollermajorversion]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[writeevents]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[starteredition]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[scounixware]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[sum]"]
    - ["system.int32", "microsoft.powershell.commands.exportclixmlcommand", "Member[depth]"]
    - ["system.string[]", "microsoft.powershell.commands.moveitemcommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[csroles]"]
    - ["system.uri", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[iconuri]"]
    - ["system.string", "microsoft.powershell.commands.startprocesscommand", "Member[redirectstandardinput]"]
    - ["system.guid[]", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[vmid]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[msdos]"]
    - ["system.uri[]", "microsoft.powershell.commands.getpssessioncommand", "Member[connectionuri]"]
    - ["system.string[]", "microsoft.powershell.commands.exportmodulemembercommand", "Member[variable]"]
    - ["system.string", "microsoft.powershell.commands.protectcmsmessagecommand", "Member[path]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestpscmdlet", "Member[maximumredirection]"]
    - ["system.object[]", "microsoft.powershell.commands.updatelistcommand", "Member[add]"]
    - ["system.nullable<microsoft.powershell.commands.cpuavailability>", "microsoft.powershell.commands.processor", "Member[availability]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[useutf16]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Member[pattern]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxconcurrentusers]"]
    - ["system.nullable<microsoft.powershell.commands.ostype>", "microsoft.powershell.commands.computerinfo", "Member[ostype]"]
    - ["microsoft.powershell.commands.outtarget", "microsoft.powershell.commands.outtarget!", "Member[host]"]
    - ["system.string", "microsoft.powershell.commands.invokehistorycommand", "Member[id]"]
    - ["system.string[]", "microsoft.powershell.commands.corecommandbase", "Member[include]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttosecurestringcommand", "Member[asplaintext]"]
    - ["system.string[]", "microsoft.powershell.commands.importclixmlcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[companyname]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulecommand", "Member[cmdlet]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getpssnapincommand", "Member[registered]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[resolvedestination]"]
    - ["system.object[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[visiblecmdlets]"]
    - ["system.boolean", "microsoft.powershell.commands.renamecomputerchangeinfo", "Member[hassucceeded]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[compileroptions]"]
    - ["system.string", "microsoft.powershell.commands.addtypecompilererror", "Member[filename]"]
    - ["system.management.automation.scopeditemoptions", "microsoft.powershell.commands.setvariablecommand", "Member[option]"]
    - ["microsoft.powershell.commands.outtarget", "microsoft.powershell.commands.outtarget!", "Member[default]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.copyitemcommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.restartcomputertimeoutexception", "Member[computername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[traceroute]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[enablevalidation]"]
    - ["system.string[]", "microsoft.powershell.commands.formathex", "Member[literalpath]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.converttocsvcommand", "Member[inputobject]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.sendmailmessage", "Member[credential]"]
    - ["system.boolean", "microsoft.powershell.commands.removeitemcommand", "Member[providersupportsshouldprocess]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[x86]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsrt]"]
    - ["system.int32", "microsoft.powershell.commands.newtimespancommand", "Member[seconds]"]
    - ["microsoft.powershell.commands.servicestartuptype", "microsoft.powershell.commands.servicestartuptype!", "Member[automatic]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[biostargetoperatingsystem]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.newmodulecommand", "Member[scriptblock]"]
    - ["system.string", "microsoft.powershell.commands.importcsvcommand", "Member[encoding]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[processidletimeoutsec]"]
    - ["system.string[]", "microsoft.powershell.commands.setitempropertycommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.converttohtmlcommand", "Member[title]"]
    - ["system.int32", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[column]"]
    - ["system.string", "microsoft.powershell.commands.removealiascommand", "Member[scope]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[asjob]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[utf8]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.convertfromsecurestringcommand", "Member[asplaintext]"]
    - ["system.string[]", "microsoft.powershell.commands.converttohtmlcommand", "Member[head]"]
    - ["system.string", "microsoft.powershell.commands.setitemcommand", "Member[filter]"]
    - ["system.text.encoding", "microsoft.powershell.commands.filesystemcontentdynamicparametersbase", "Member[encodingtype]"]
    - ["system.string[]", "microsoft.powershell.commands.setitempropertycommand", "Member[literalpath]"]
    - ["system.boolean", "microsoft.powershell.commands.modulecmdletbase", "Member[addtoappdomainlevelcache]"]
    - ["system.string[]", "microsoft.powershell.commands.selectstringcommand", "Member[path]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[desktop]"]
    - ["system.object", "microsoft.powershell.commands.getrandomcommandbase", "Member[maximum]"]
    - ["system.string", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[persistencepath]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.foreachobjectcommand", "Member[parallel]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsultimate]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[osfreespaceinpagingfiles]"]
    - ["system.string[]", "microsoft.powershell.commands.importworkflowcommand", "Member[dependentassemblies]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxprocessespersession]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[securitydescriptorsddl]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[clearpropertydynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportconsolecommand", "Member[noclobber]"]
    - ["system.management.automation.runspaces.typedata", "microsoft.powershell.commands.removetypedatacommand", "Member[typedata]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[maximumreceiveddatasizepercommand]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[dedicated]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.restartcomputercommand", "Member[wait]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[powersavelowpowermode]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.computerinfo", "Member[csnumberofprocessors]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getgroup].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.teeobjectcommand", "Member[filepath]"]
    - ["system.boolean", "microsoft.powershell.commands.psrunspacedebug", "Member[breakall]"]
    - ["system.management.automation.job", "microsoft.powershell.commands.debugjobcommand", "Member[job]"]
    - ["system.nullable<system.guid>", "microsoft.powershell.commands.modulespecification", "Member[guid]"]
    - ["system.management.automation.runspaces.pssession", "microsoft.powershell.commands.getmodulecommand", "Member[pssession]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getprocesscommand", "Member[includeusername]"]
    - ["system.string", "microsoft.powershell.commands.gethelpcommand", "Member[path]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.getpssessioncommand", "Member[credential]"]
    - ["microsoft.powershell.commands.webauthenticationtype", "microsoft.powershell.commands.webrequestpscmdlet", "Member[authentication]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osmanufacturer]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.disablepssessionconfigurationcommand", "Member[force]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csautomaticresetbootoption]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericobjectmeasureinfo", "Member[sum]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet", "Method[resolveshell].ReturnValue"]
    - ["system.management.automation.runspaces.outputbufferingmode", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[outputbufferingmode]"]
    - ["system.version", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[powershellversion]"]
    - ["system.int32[]", "microsoft.powershell.commands.getjobcommand", "Member[id]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageserverexpresscore]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopprocesscommand", "Member[force]"]
    - ["system.object", "microsoft.powershell.commands.objecteventregistrationbase", "Method[getsourceobject].ReturnValue"]
    - ["system.security.securestring", "microsoft.powershell.commands.convertfromtosecurestringcommandbase", "Member[securekey]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[preservehttpmethodonredirect]"]
    - ["system.boolean", "microsoft.powershell.commands.corecommandbase", "Method[doesprovidersupportshouldprocess].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.invokecommandcommand", "Member[hostname]"]
    - ["system.string[]", "microsoft.powershell.commands.getcontrolpanelitemcommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.newitempropertycommand", "Member[name]"]
    - ["system.nullable<system.int16>", "microsoft.powershell.commands.computerinfo", "Member[cscurrenttimezone]"]
    - ["system.string[]", "microsoft.powershell.commands.basecsvwritingcommand", "Member[quotefields]"]
    - ["system.string", "microsoft.powershell.commands.setauthenticodesignaturecommand", "Member[includechain]"]
    - ["system.string[]", "microsoft.powershell.commands.getlocationcommand", "Member[psdrive]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[cslastloadinfo]"]
    - ["system.string", "microsoft.powershell.commands.processcommandexception", "Member[processname]"]
    - ["system.uri", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[licenseuri]"]
    - ["system.boolean", "microsoft.powershell.commands.clearcontentcommand", "Member[providersupportsshouldprocess]"]
    - ["system.uint16[]", "microsoft.powershell.commands.computerinfo", "Member[csbootstatus]"]
    - ["microsoft.powershell.commands.processortype", "microsoft.powershell.commands.processortype!", "Member[unknown]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powersavewarning]"]
    - ["system.boolean", "microsoft.powershell.commands.sendastrustedissuerproperty!", "Method[readsendastrustedissuerproperty].ReturnValue"]
    - ["system.int32[]", "microsoft.powershell.commands.geteventlogcommand", "Member[index]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[aseries]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.newwineventcommand", "Member[providername]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osserialnumber]"]
    - ["system.version", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[clrversion]"]
    - ["system.int32", "microsoft.powershell.commands.startjobcommand", "Member[throttlelimit]"]
    - ["system.collections.ilist", "microsoft.powershell.commands.sessionstateproviderbasecontentreaderwriter", "Method[write].ReturnValue"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[put]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[getpropertydynamicparameters].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.exportmodulemembercommand", "Member[function]"]
    - ["system.string[]", "microsoft.powershell.commands.moveitempropertycommand", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getpfxcertificatecommand", "Member[nopromptforpassword]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newmodulecommand", "Member[ascustomobject]"]
    - ["system.string[]", "microsoft.powershell.commands.writeinformationcommand", "Member[tags]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxsessionsperuser]"]
    - ["system.object[]", "microsoft.powershell.commands.newmodulecommand", "Member[argumentlist]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.showcommandcommand", "Member[errorpopup]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestsession", "Member[maximumredirection]"]
    - ["system.string[]", "microsoft.powershell.commands.controlpanelitem", "Member[category]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.setwmiinstance", "Member[arguments]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivepssessioncommand", "Member[allowredirection]"]
    - ["system.management.automation.job[]", "microsoft.powershell.commands.stopjobcommand", "Member[job]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportcsvcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getuptimecommand", "Member[since]"]
    - ["microsoft.powershell.commands.producttype", "microsoft.powershell.commands.producttype!", "Member[workstation]"]
    - ["system.string[]", "microsoft.powershell.commands.wmibasecmdlet", "Member[computername]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemprovider", "Method[haschilditems].ReturnValue"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[joinwithnewname]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.outnullcommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.webauthenticationtype", "microsoft.powershell.commands.webauthenticationtype!", "Member[basic]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osbuildnumber]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessioncommand", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csmanufacturer]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.newpssessioncommand", "Member[credential]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[machkernel]"]
    - ["microsoft.powershell.commands.waitforservicetypes", "microsoft.powershell.commands.waitforservicetypes!", "Member[wmi]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[businessedition]"]
    - ["system.string[]", "microsoft.powershell.commands.securitydescriptorinfo", "Member[discretionaryacl]"]
    - ["system.string", "microsoft.powershell.commands.psrunspacecmdlet!", "Member[vmnameinstanceidparameterset]"]
    - ["system.string", "microsoft.powershell.commands.exportclixmlcommand", "Member[path]"]
    - ["system.byte[]", "microsoft.powershell.commands.bytecollection", "Member[bytes]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[maxconnectionretrycount]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.sendmailmessage", "Member[bodyashtml]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.language!", "Member[csharpversion3]"]
    - ["system.string[]", "microsoft.powershell.commands.setaclcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowscurrentversion]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.computerinfo", "Member[csnumberoflogicalprocessors]"]
    - ["system.int64", "microsoft.powershell.commands.importcountercommand", "Member[maxsamples]"]
    - ["system.string", "microsoft.powershell.commands.convertfromstringdatacommand", "Member[stringdata]"]
    - ["system.string", "microsoft.powershell.commands.writeeventlogcommand", "Member[source]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.converttohtmlcommand", "Member[meta]"]
    - ["system.boolean", "microsoft.powershell.commands.psrunspacedebug", "Member[enabled]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[formathexresolvepatherror]"]
    - ["system.string", "microsoft.powershell.commands.newservicecommand", "Member[description]"]
    - ["system.string", "microsoft.powershell.commands.importmodulecommand", "Member[maximumversion]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osregistereduser]"]
    - ["system.string", "microsoft.powershell.commands.webresponseobject", "Method[tostring].ReturnValue"]
    - ["system.security.accesscontrol.objectsecurity", "microsoft.powershell.commands.filesystemprovider", "Method[newsecuritydescriptoroftype].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.certificateprovider", "Method[getchildname].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[allowredirection]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osarchitecture]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.wmibasecmdlet", "Member[enableallprivileges]"]
    - ["microsoft.powershell.executionpolicyscope", "microsoft.powershell.commands.setexecutionpolicycommand", "Member[scope]"]
    - ["microsoft.powershell.commands.serverlevel", "microsoft.powershell.commands.serverlevel!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.bytecollection", "Member[hexoffset]"]
    - ["system.object[]", "microsoft.powershell.commands.getcommandcommand", "Member[argumentlist]"]
    - ["system.object", "microsoft.powershell.commands.certificateprovider", "Method[getchilditemsdynamicparameters].ReturnValue"]
    - ["system.management.automation.signature", "microsoft.powershell.commands.signaturecommandsbase", "Member[signature]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osstatus]"]
    - ["system.object", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[variabledefinitions]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[notmatch]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setservicecommand", "Member[force]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[smmsecuritymitigations]"]
    - ["system.object[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[requiredmodules]"]
    - ["system.diagnostics.process", "microsoft.powershell.commands.enterpshostprocesscommand", "Member[process]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importaliascommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[skiprevocationcheck]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.invokerestmethodcommand", "Member[method]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[xenix]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startjobcommand", "Member[runas32]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[sohoserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setclipboardcommand", "Member[passthru]"]
    - ["system.guid", "microsoft.powershell.commands.receivepssessioncommand", "Member[instanceid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablepssessionconfigurationcommand", "Member[noservicerestart]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[ceq]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.htmlwebresponseobject", "Member[inputfields]"]
    - ["system.management.automation.psmembertypes", "microsoft.powershell.commands.addmembercommand", "Member[membertype]"]
    - ["system.management.automation.scopeditemoptions", "microsoft.powershell.commands.functionproviderdynamicparameters", "Member[options]"]
    - ["system.management.automation.provider.icontentwriter", "microsoft.powershell.commands.sessionstateproviderbase", "Method[getcontentwriter].ReturnValue"]
    - ["system.object", "microsoft.powershell.commands.sessionstateproviderbase", "Method[getcontentreaderdynamicparameters].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.newitempropertycommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.resetcapability", "microsoft.powershell.commands.resetcapability!", "Member[disabled]"]
    - ["system.security.principal.securityidentifier", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getcentralaccesspolicyid].ReturnValue"]
    - ["system.int64", "microsoft.powershell.commands.formathex", "Member[count]"]
    - ["system.byte[]", "microsoft.powershell.commands.convertfromtosecurestringcommandbase", "Member[key]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[offduty]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.invokecommandcommand", "Member[options]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[name]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.processor", "Member[numberoflogicalprocessors]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setauthenticodesignaturecommand", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.controlpanelitem", "Member[canonicalname]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[ultimateedition]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopservicecommand", "Member[nowait]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[other]"]
    - ["system.string", "microsoft.powershell.commands.gethelpcommand", "Member[parameter]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.passthroughitempropertycommandbase", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[assembliestoload]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.language!", "Member[jscript]"]
    - ["system.int32", "microsoft.powershell.commands.converttoxmlcommand", "Member[depth]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[match]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.addcomputercommand", "Member[credential]"]
    - ["system.int32[]", "microsoft.powershell.commands.stopprocesscommand", "Member[id]"]
    - ["system.string[]", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[containerid]"]
    - ["system.int32", "microsoft.powershell.commands.converttojsoncommand", "Member[depth]"]
    - ["system.string[]", "microsoft.powershell.commands.convertfromcsvcommand", "Member[header]"]
    - ["system.string", "microsoft.powershell.commands.psworkflowexecutionoption", "Method[constructprivatedata].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removepssnapincommand", "Member[passthru]"]
    - ["microsoft.powershell.commands.osencryptionlevel", "microsoft.powershell.commands.osencryptionlevel!", "Member[encrypt40bits]"]
    - ["system.int32", "microsoft.powershell.commands.startjobcommand", "Member[port]"]
    - ["system.string", "microsoft.powershell.commands.importworkflowcommand!", "Method[createfunctionfromxaml].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[ccontains]"]
    - ["system.management.impersonationlevel", "microsoft.powershell.commands.stopcomputercommand", "Member[impersonation]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsinstallationtype]"]
    - ["system.boolean", "microsoft.powershell.commands.sessionstateproviderbase", "Method[haschilditems].ReturnValue"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[windowsembedded]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newitempropertycommand", "Member[force]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[performanceserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outfilecommand", "Member[append]"]
    - ["system.string[]", "microsoft.powershell.commands.invokecommandcommand", "Member[sessionname]"]
    - ["system.string[]", "microsoft.powershell.commands.setclipboardcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[ossystemdrive]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[cschassisskunumber]"]
    - ["system.string", "microsoft.powershell.commands.getmodulecommand", "Member[cimnamespace]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[appliancepc]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[leafbase]"]
    - ["system.string[]", "microsoft.powershell.commands.importworkflowcommand", "Member[path]"]
    - ["system.management.automation.psobject[]", "microsoft.powershell.commands.compareobjectcommand", "Member[differenceobject]"]
    - ["microsoft.powershell.commands.outputmodeoption", "microsoft.powershell.commands.outgridviewcommand", "Member[outputmode]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[copyright]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[runasvirtualaccountgroups]"]
    - ["system.uint32", "microsoft.powershell.commands.bytecollection", "Member[offset]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageexpressserveredition]"]
    - ["system.int32", "microsoft.powershell.commands.selectobjectcommand", "Member[last]"]
    - ["system.string", "microsoft.powershell.commands.hotfix", "Member[fixcomments]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.startjobcommand", "Member[session]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider!", "Method[lengthstring].ReturnValue"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[bigendianutf32]"]
    - ["microsoft.powershell.commands.bootoptionaction", "microsoft.powershell.commands.bootoptionaction!", "Member[operatingsystem]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsprofessionalwithmediacenter]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.tracecommandcommand", "Member[expression]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[bioscodeset]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommandbase", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.exportformatdatacommand", "Member[literalpath]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csenabledaylightsavingstime]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[infile]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowshome]"]
    - ["system.string[]", "microsoft.powershell.commands.joinpathcommand", "Member[additionalchildpath]"]
    - ["system.string", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[subsystem]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[openvms]"]
    - ["system.management.automation.runspaces.outputbufferingmode", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[outputbufferingmode]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.basichtmlwebresponseobject", "Member[inputfields]"]
    - ["system.boolean", "microsoft.powershell.commands.corecommandbase", "Member[supportsshouldprocess]"]
    - ["system.string[]", "microsoft.powershell.commands.getchilditemcommand", "Member[exclude]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[global]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[cssystemskunumber]"]
    - ["system.management.automation.breakpoint[]", "microsoft.powershell.commands.psbreakpointupdatercommandbase", "Member[breakpoint]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[roledefinitions]"]
    - ["system.string[]", "microsoft.powershell.commands.exportmodulemembercommand", "Member[alias]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[server2008enterprise]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportclixmlcommand", "Member[force]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[os2]"]
    - ["system.version", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[psversion]"]
    - ["microsoft.powershell.commands.osproductsuite[]", "microsoft.powershell.commands.computerinfo", "Member[ossuites]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[netware]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[authentication]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.processor", "Member[maxclockspeed]"]
    - ["system.string[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[computername]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[maximumreceivedobjectsizemb]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.selectstringcommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[arm]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.copyitemcommand", "Member[force]"]
    - ["microsoft.powershell.commands.systemelementstate", "microsoft.powershell.commands.systemelementstate!", "Member[other]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[ping]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.gethelpcommand", "Member[detailed]"]
    - ["system.string[]", "microsoft.powershell.commands.getitempropertycommand", "Member[literalpath]"]
    - ["system.nullable<microsoft.powershell.commands.hardwaresecurity>", "microsoft.powershell.commands.computerinfo", "Member[cspoweronpasswordstatus]"]
    - ["system.version", "microsoft.powershell.commands.startjobcommand", "Member[psversion]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.resetcomputermachinepasswordcommand", "Member[credential]"]
    - ["system.nullable<system.management.automation.runspaces.outputbufferingmode>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[outputbufferingmode]"]
    - ["system.boolean", "microsoft.powershell.commands.registryprovider", "Method[haschilditems].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.enterpshostprocesscommand", "Member[appdomainname]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[sequent]"]
    - ["system.management.automation.extendedtypedefinition[]", "microsoft.powershell.commands.exportformatdatacommand", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.getexperimentalfeaturecommand", "Member[name]"]
    - ["system.security.cryptography.x509certificates.x509certificate2", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[certificate]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.updatelistcommand", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.getverbcommand", "Member[group]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.protectcmsmessagecommand", "Member[content]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcountercommand", "Member[continuous]"]
    - ["system.object", "microsoft.powershell.commands.addmembercommand", "Member[value]"]
    - ["microsoft.powershell.executionpolicy", "microsoft.powershell.commands.setexecutionpolicycommand", "Member[executionpolicy]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.startprocesscommand", "Member[environment]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[action]"]
    - ["system.string", "microsoft.powershell.commands.selectstringcommand", "Member[encoding]"]
    - ["system.string", "microsoft.powershell.commands.setauthenticodesignaturecommand", "Member[hashalgorithm]"]
    - ["system.string[]", "microsoft.powershell.commands.settracesourcecommand", "Member[removelistener]"]
    - ["system.byte[]", "microsoft.powershell.commands.signaturecommandsbase", "Member[content]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[beos]"]
    - ["system.string[]", "microsoft.powershell.commands.settracesourcecommand", "Member[name]"]
    - ["system.object", "microsoft.powershell.commands.registerengineeventcommand", "Method[getsourceobject].ReturnValue"]
    - ["microsoft.powershell.commands.convertfromsddlstringcommand+accessrighttypenames", "microsoft.powershell.commands.convertfromsddlstringcommand", "Member[type]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[default]"]
    - ["system.security.cryptography.x509certificates.storelocation", "microsoft.powershell.commands.x509storelocation", "Member[location]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.setaclcommand", "Member[inputobject]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.getpssessioncommand", "Member[authentication]"]
    - ["microsoft.powershell.commands.sessionfilterstate", "microsoft.powershell.commands.sessionfilterstate!", "Member[closed]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.clearvariablecommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getservicecommand", "Member[requiredservices]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[hour]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.showmarkdowncommand", "Member[usebrowser]"]
    - ["microsoft.powershell.commands.domainrole", "microsoft.powershell.commands.domainrole!", "Member[primarydomaincontroller]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[joinreadonly]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.waitprocesscommand", "Member[any]"]
    - ["system.management.automation.runspaces.runspace", "microsoft.powershell.commands.psbreakpointupdatercommandbase", "Member[runspace]"]
    - ["system.management.automation.jobstate", "microsoft.powershell.commands.jobcmdletbase", "Member[state]"]
    - ["system.string", "microsoft.powershell.commands.getcredentialcommand", "Member[message]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.basecsvwritingcommand", "Member[noheader]"]
    - ["system.string", "microsoft.powershell.commands.tracecommandcommand", "Member[filepath]"]
    - ["system.management.automation.scopeditemoptions", "microsoft.powershell.commands.aliasproviderdynamicparameters", "Member[options]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.settracesourcecommand", "Member[pshost]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.unprotectcmsmessagecommand", "Member[eventlogrecord]"]
    - ["system.int32", "microsoft.powershell.commands.writeprogresscommand", "Member[secondsremaining]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[writejobinresults]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.objecteventregistrationbase", "Member[messagedata]"]
    - ["system.object", "microsoft.powershell.commands.outlineoutputcommand", "Member[lineoutput]"]
    - ["system.management.automation.signature", "microsoft.powershell.commands.signaturecommandsbase", "Method[performaction].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csbootupstate]"]
    - ["system.serviceprocess.servicecontroller", "microsoft.powershell.commands.setservicecommand", "Member[inputobject]"]
    - ["system.management.automation.providerinfo", "microsoft.powershell.commands.filesystemprovider", "Method[start].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.startsleepcommand", "Member[milliseconds]"]
    - ["system.string", "microsoft.powershell.commands.enterpssessioncommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosidentificationcode]"]
    - ["system.string", "microsoft.powershell.commands.writealiascommandbase", "Member[value]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsbreakpointcommand", "Member[script]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsprovidercommand", "Member[psprovider]"]
    - ["microsoft.powershell.commands.breakpointtype", "microsoft.powershell.commands.breakpointtype!", "Member[variable]"]
    - ["system.string", "microsoft.powershell.commands.objecteventregistrationbase", "Member[sourceidentifier]"]
    - ["system.string[]", "microsoft.powershell.commands.setclipboardcommand", "Member[value]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[oslastbootuptime]"]
    - ["system.int32", "microsoft.powershell.commands.newtimespancommand", "Member[days]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[certificatethumbprint]"]
    - ["system.string", "microsoft.powershell.commands.geteventlogcommand", "Member[logname]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[cssystemtype]"]
    - ["system.string[]", "microsoft.powershell.commands.testfilecatalogcommand", "Member[filestoskip]"]
    - ["system.string", "microsoft.powershell.commands.unregistereventcommand", "Member[sourceidentifier]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[parent]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.unprotectcmsmessagecommand", "Member[includecontext]"]
    - ["system.string", "microsoft.powershell.commands.updatedata!", "Member[fileparameterset]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.wmibasecmdlet", "Member[credential]"]
    - ["system.int32", "microsoft.powershell.commands.startsleepcommand", "Member[seconds]"]
    - ["system.management.authenticationlevel", "microsoft.powershell.commands.testconnectioncommand", "Member[dcomauthentication]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.invokecommandcommand", "Member[session]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getlocationcommand", "Member[stack]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[month]"]
    - ["system.nullable<system.int64>", "microsoft.powershell.commands.computerinfo", "Member[cspauseafterreset]"]
    - ["system.management.automation.job[]", "microsoft.powershell.commands.receivejobcommand", "Member[job]"]
    - ["system.string", "microsoft.powershell.commands.dnsnamerepresentation", "Member[punycode]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[detailed]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[ossizestoredinpagingfiles]"]
    - ["microsoft.powershell.commands.displayhinttype", "microsoft.powershell.commands.displayhinttype!", "Member[time]"]
    - ["system.uri[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[connectionuri]"]
    - ["system.uint64", "microsoft.powershell.commands.bytecollection", "Member[offset64]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[datacenterservercoreedition]"]
    - ["system.int32", "microsoft.powershell.commands.formatcustomcommand", "Member[depth]"]
    - ["system.string[]", "microsoft.powershell.commands.clearitemcommand", "Member[literalpath]"]
    - ["system.management.automation.sessionstateentryvisibility", "microsoft.powershell.commands.setvariablecommand", "Member[visibility]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.unregisterpssessionconfigurationcommand", "Member[force]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[day]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[workflowshutdowntimeoutmsec]"]
    - ["system.string[]", "microsoft.powershell.commands.getcommandcommand", "Member[noun]"]
    - ["system.string", "microsoft.powershell.commands.receivepssessioncommand", "Member[applicationname]"]
    - ["system.string[]", "microsoft.powershell.commands.selectstringcommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[referencedassemblies]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[homeedition]"]
    - ["system.security.securestring", "microsoft.powershell.commands.securestringcommandbase", "Member[securestringdata]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[microsofthypervserver]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[solaris]"]
    - ["system.int32", "microsoft.powershell.commands.psrunspacedebug", "Member[runspaceid]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[desktop]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removepsdrivecommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[hostname]"]
    - ["system.boolean", "microsoft.powershell.commands.settimezonecommand", "Member[hasaccess]"]
    - ["system.boolean", "microsoft.powershell.commands.setitemcommand", "Member[providersupportsshouldprocess]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[rhapsody]"]
    - ["system.string", "microsoft.powershell.commands.importlocalizeddata", "Member[uiculture]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverenterprisenohypervcore]"]
    - ["system.string", "microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[getlinktype].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.updatetypedatacommand", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.commonrunspacecommandbase!", "Member[runspacenameparameterset]"]
    - ["system.string", "microsoft.powershell.commands.newpssessioncommand", "Member[configurationname]"]
    - ["system.management.automation.breakpoint[]", "microsoft.powershell.commands.psbreakpointcommandbase", "Member[breakpoint]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osothertypedescription]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outstringcommand", "Member[stream]"]
    - ["system.int64", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxpersistencestoresizegb]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[name]"]
    - ["microsoft.powershell.commands.wmistate", "microsoft.powershell.commands.wmistate!", "Member[stopping]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newobjectcommand", "Member[strict]"]
    - ["system.management.automation.debugger", "microsoft.powershell.commands.commonrunspacecommandbase", "Method[getdebuggerfromrunspace].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.connectpssessioncommand", "Member[certificatethumbprint]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.gethotfixcommand", "Member[credential]"]
    - ["system.string[]", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[variable]"]
    - ["microsoft.powershell.commands.breakpointtype", "microsoft.powershell.commands.breakpointtype!", "Member[line]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.updatablehelpcommandbase", "Member[usedefaultcredentials]"]
    - ["system.string[]", "microsoft.powershell.commands.removecomputercommand", "Member[computername]"]
    - ["system.management.automation.sessionstateentryvisibility", "microsoft.powershell.commands.newvariablecommand", "Member[visibility]"]
    - ["system.nullable<microsoft.powershell.commands.wakeuptype>", "microsoft.powershell.commands.computerinfo", "Member[cswakeuptype]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[notapplicable]"]
    - ["system.int32", "microsoft.powershell.commands.geteventlogcommand", "Member[newest]"]
    - ["system.char", "microsoft.powershell.commands.convertfromstringdatacommand", "Member[delimiter]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[hypervrequirementdataexecutionpreventionavailable]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[osinusevirtualmemory]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[clearpropertydynamicparameters].ReturnValue"]
    - ["system.collections.hashtable[]", "microsoft.powershell.commands.startjobcommand", "Member[sshconnection]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setitemcommand", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.waitprocesscommand", "Member[name]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[clusterserveredition]"]
    - ["system.string[]", "microsoft.powershell.commands.gethelpcommand", "Member[category]"]
    - ["system.management.automation.pslanguagemode", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[languagemode]"]
    - ["system.string[]", "microsoft.powershell.commands.testpathcommand", "Member[literalpath]"]
    - ["system.management.automation.remoting.pssessionoption", "microsoft.powershell.commands.connectpssessioncommand", "Member[sessionoption]"]
    - ["system.string", "microsoft.powershell.commands.registerpssessionconfigurationcommand", "Member[processorarchitecture]"]
    - ["system.string[]", "microsoft.powershell.commands.invokeitemcommand", "Member[path]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[disconnecting]"]
    - ["system.string[]", "microsoft.powershell.commands.getwineventcommand", "Member[providername]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemprovider", "Method[convertpath].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[ipv4]"]
    - ["system.string", "microsoft.powershell.commands.historyinfo", "Method[tostring].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.sortobjectcommand", "Member[bottom]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[biosinstalldate]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[skipheadervalidation]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[utf7]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericmeasureinfo", "Member[sum]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[usewindowspowershellparameterset]"]
    - ["system.string", "microsoft.powershell.commands.renameitempropertycommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.copyitemcommand", "Member[path]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removeitemcommand", "Member[recurse]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outstringcommand", "Member[nonewline]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[resolve]"]
    - ["system.int32", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[throttlelimit]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessioncommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.updatehelpcommand", "Member[module]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[like]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[includeportinspn]"]
    - ["system.int32", "microsoft.powershell.commands.restartcomputertimeoutexception", "Member[timeout]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[getchildnamesdynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.showcommandcommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.filesystemcontentreaderdynamicparameters", "Member[wait]"]
    - ["microsoft.powershell.commands.hardwaresecurity", "microsoft.powershell.commands.hardwaresecurity!", "Member[notimplemented]"]
    - ["system.security.accesscontrol.authorizationrulecollection", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getaudit].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[header6color]"]
    - ["system.timespan", "microsoft.powershell.commands.setdatecommand", "Member[adjust]"]
    - ["system.string", "microsoft.powershell.commands.exportaliascommand", "Member[scope]"]
    - ["system.version", "microsoft.powershell.commands.modulespecification", "Member[version]"]
    - ["system.string", "microsoft.powershell.commands.pspropertyexpression", "Method[tostring].ReturnValue"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[bigendianunicode]"]
    - ["system.type", "microsoft.powershell.commands.updatetypedatacommand", "Member[targettypefordeserialization]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[allowinsecureredirect]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[sessionvariable]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[visibleproviders]"]
    - ["system.management.automation.variableaccessmode", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[mode]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[webserveredition]"]
    - ["system.string", "microsoft.powershell.commands.newservicecommand", "Member[name]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageserverworkgroupcore]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[x64]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[keep]"]
    - ["system.string[]", "microsoft.powershell.commands.getlocationcommand", "Member[stackname]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxrunningworkflows]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcommandcommand", "Member[listimported]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[code]"]
    - ["system.string", "microsoft.powershell.commands.renameitempropertycommand", "Member[newname]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[status]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[defaultpowershellremoteshellname]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oshardwareabstractionlayer]"]
    - ["system.string", "microsoft.powershell.commands.newpsdrivecommand", "Member[root]"]
    - ["system.diagnostics.traceoptions", "microsoft.powershell.commands.tracecommandcommand", "Member[listeneroption]"]
    - ["system.management.automation.scriptblock[]", "microsoft.powershell.commands.foreachobjectcommand", "Member[remainingscripts]"]
    - ["system.net.http.httpresponsemessage", "microsoft.powershell.commands.httpresponseexception", "Member[response]"]
    - ["system.int32", "microsoft.powershell.commands.invokecommandcommand", "Member[connectingtimeout]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[credentialsrequired]"]
    - ["system.string[]", "microsoft.powershell.commands.importmodulecommand", "Member[cmdlet]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[copyitemdynamicparameters].ReturnValue"]
    - ["microsoft.powershell.commands.systemelementstate", "microsoft.powershell.commands.systemelementstate!", "Member[critical]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[terminalservicessinglesession]"]
    - ["system.management.automation.pssessiontypeoption", "microsoft.powershell.commands.psworkflowexecutionoption", "Method[constructobjectfromprivatedata].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopservicecommand", "Member[force]"]
    - ["system.management.automation.psmembertypes", "microsoft.powershell.commands.updatetypedatacommand", "Member[membertype]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[enterpriseserver]"]
    - ["system.int32", "microsoft.powershell.commands.getrandomcommandbase", "Member[count]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setpsdebugcommand", "Member[off]"]
    - ["system.string", "microsoft.powershell.commands.writewarningcommand", "Member[message]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[description]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[setitemdynamicparameters].ReturnValue"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osprimary]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[ossystemdevice]"]
    - ["system.string[]", "microsoft.powershell.commands.getaliascommand", "Member[name]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[patch]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addhistorycommand", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.getwineventcommand", "Member[logname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removecomputercommand", "Member[restart]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxmemorypersessionmb]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[head]"]
    - ["system.management.automation.remoting.pssessionoption", "microsoft.powershell.commands.receivepssessioncommand", "Member[sessionoption]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.registryprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[categoryreason]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[u6000]"]
    - ["system.string", "microsoft.powershell.commands.removepsdrivecommand", "Member[scope]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.geteventlogcommand", "Member[asstring]"]
    - ["system.string", "microsoft.powershell.commands.invokerestmethodcommand", "Member[statuscodevariable]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.webrequestpscmdlet", "Member[form]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[definitionname]"]
    - ["microsoft.powershell.commands.sessionfilterstate", "microsoft.powershell.commands.sessionfilterstate!", "Member[disconnected]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[filepath]"]
    - ["system.string", "microsoft.powershell.commands.getwineventcommand", "Member[computername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removeitemcommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.signaturecommandsbase", "Member[sourcepathorextension]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.settimezonecommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.removecomputercommand", "Member[workgroupname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttosecurestringcommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.filesystemprovidergetitemdynamicparameters", "Member[stream]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.startprocesscommand", "Member[argumentlist]"]
    - ["system.string[]", "microsoft.powershell.commands.securitydescriptorcommandsbase", "Member[exclude]"]
    - ["system.collections.hashtable[]", "microsoft.powershell.commands.getwineventcommand", "Member[filterhashtable]"]
    - ["system.object[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[modulestoimport]"]
    - ["system.management.automation.remoting.pssessionoption", "microsoft.powershell.commands.invokecommandcommand", "Member[sessionoption]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[connected]"]
    - ["microsoft.powershell.commands.servicestartuptype", "microsoft.powershell.commands.servicestartuptype!", "Member[manual]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.joinpathcommand", "Member[resolve]"]
    - ["system.management.automation.psmembertypes", "microsoft.powershell.commands.memberdefinition", "Member[membertype]"]
    - ["system.string", "microsoft.powershell.commands.neweventlogcommand", "Member[logname]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[italicsforegroundcolor]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[os400]"]
    - ["microsoft.powershell.commands.testpathtype", "microsoft.powershell.commands.testpathtype!", "Member[container]"]
    - ["microsoft.powershell.commands.domainrole", "microsoft.powershell.commands.domainrole!", "Member[standaloneserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.convertfromjsoncommand", "Member[ashashtable]"]
    - ["system.string[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.setlocationcommand", "Member[path]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[modebasedexecutioncontrol]"]
    - ["system.management.authenticationlevel", "microsoft.powershell.commands.wmibasecmdlet", "Member[authentication]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[header2color]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osportableoperatingsystem]"]
    - ["system.string", "microsoft.powershell.commands.registerwmieventcommand", "Member[namespace]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[is]"]
    - ["system.management.automation.psobject[]", "microsoft.powershell.commands.convertfromcsvcommand", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.resumejobcommand", "Member[wait]"]
    - ["system.string", "microsoft.powershell.commands.pushlocationcommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[ia64]"]
    - ["system.int32[]", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[line]"]
    - ["system.string", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[persistencepath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.copyitemcommand", "Member[container]"]
    - ["system.object", "microsoft.powershell.commands.whereobjectcommand", "Member[value]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.htmlwebresponseobject", "Member[links]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.pspropertyexpression", "Member[script]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[persistwithencryption]"]
    - ["system.string", "microsoft.powershell.commands.testpssessionconfigurationfilecommand", "Member[path]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.startjobcommand", "Member[scriptblock]"]
    - ["system.int32", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[idletimeoutsec]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosmanufacturer]"]
    - ["microsoft.powershell.commands.systemelementstate", "microsoft.powershell.commands.systemelementstate!", "Member[warning]"]
    - ["system.string[]", "microsoft.powershell.commands.removepssessioncommand", "Member[containerid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addmembercommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.stopjobcommand", "Member[command]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[homebasicedition]"]
    - ["system.string", "microsoft.powershell.commands.certificateprovider", "Method[system.management.automation.provider.icmdletprovidersupportshelp.gethelpmaml].ReturnValue"]
    - ["system.exception", "microsoft.powershell.commands.pspropertyexpressionresult", "Member[exception]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outdefaultcommand", "Member[transcript]"]
    - ["system.int32[]", "microsoft.powershell.commands.getpshostprocessinfocommand", "Member[id]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.renamecomputercommand", "Member[localcredential]"]
    - ["system.guid[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[vmid]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[movepropertydynamicparameters].ReturnValue"]
    - ["system.text.encoding", "microsoft.powershell.commands.teeobjectcommand", "Member[encoding]"]
    - ["system.management.automation.rollbackseverity", "microsoft.powershell.commands.starttransactioncommand", "Member[rollbackpreference]"]
    - ["system.object", "microsoft.powershell.commands.readhostcommand", "Member[prompt]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.sortobjectcommand", "Member[unique]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[lt]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.htmlwebresponseobject", "Member[images]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[sessionparameterset]"]
    - ["system.string[]", "microsoft.powershell.commands.exportaliascommand", "Member[name]"]
    - ["system.globalization.cultureinfo", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[culture]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[appliancepc]"]
    - ["system.object", "microsoft.powershell.commands.pspropertyexpressionresult", "Member[result]"]
    - ["microsoft.powershell.commands.serverlevel", "microsoft.powershell.commands.serverlevel!", "Member[servercore]"]
    - ["system.string[]", "microsoft.powershell.commands.clearitempropertycommand", "Member[path]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getdatecommand", "Member[asutc]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[formatstoprocess]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportcsvcommand", "Member[noclobber]"]
    - ["system.string", "microsoft.powershell.commands.protectcmsmessagecommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.firmwaretype", "microsoft.powershell.commands.firmwaretype!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.foreachobjectcommand", "Member[membername]"]
    - ["system.string[]", "microsoft.powershell.commands.getcontrolpanelitemcommand", "Member[category]"]
    - ["system.string", "microsoft.powershell.commands.startprocesscommand", "Member[filepath]"]
    - ["system.management.automation.pseventsubscriber", "microsoft.powershell.commands.objecteventregistrationbase", "Member[newsubscriber]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[proxycredential]"]
    - ["system.string[]", "microsoft.powershell.commands.signaturecommandsbase", "Member[literalpath]"]
    - ["system.int32", "microsoft.powershell.commands.newwineventcommand", "Member[id]"]
    - ["system.byte[]", "microsoft.powershell.commands.webresponseobject", "Member[content]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Method[tostring].ReturnValue"]
    - ["system.object", "microsoft.powershell.commands.newitempropertycommand", "Member[value]"]
    - ["system.string[]", "microsoft.powershell.commands.matchinfocontext", "Member[displayprecontext]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[biosbiosversion]"]
    - ["system.object[]", "microsoft.powershell.commands.newwineventcommand", "Member[payload]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.measurecommandcommand", "Member[expression]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitempropertycommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.enterpshostprocesscommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[casesensitive]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitempropertycommand", "Member[path]"]
    - ["microsoft.powershell.commands.firmwaretype", "microsoft.powershell.commands.firmwaretype!", "Member[bios]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[notsupported]"]
    - ["system.string[]", "microsoft.powershell.commands.importcountercommand", "Member[counter]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[trace]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.neweventcommand", "Member[sender]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[tbd]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[clike]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[force]"]
    - ["microsoft.powershell.commands.serverlevel", "microsoft.powershell.commands.serverlevel!", "Member[nanoserver]"]
    - ["microsoft.powershell.commands.domainrole", "microsoft.powershell.commands.domainrole!", "Member[memberserver]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.removepssessioncommand", "Member[session]"]
    - ["system.boolean", "microsoft.powershell.commands.certificateprovider", "Method[isitemcontainer].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.outprintercommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommandbase", "Member[typedefinition]"]
    - ["system.int32[]", "microsoft.powershell.commands.getpsbreakpointcommand", "Member[id]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[warning]"]
    - ["system.type", "microsoft.powershell.commands.updatetypedatacommand", "Member[typeadapter]"]
    - ["system.string[]", "microsoft.powershell.commands.getitempropertycommand", "Member[path]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[byte]"]
    - ["system.string[]", "microsoft.powershell.commands.invokeitemcommand", "Member[exclude]"]
    - ["system.int32", "microsoft.powershell.commands.enterpssessioncommand", "Member[throttlelimit]"]
    - ["system.string[]", "microsoft.powershell.commands.getrunspacecommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcommandcommand", "Member[all]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enterpssessioncommand", "Member[enablenetworkaccess]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablerunspacedebugcommand", "Member[breakall]"]
    - ["system.string", "microsoft.powershell.commands.renameitemcommand", "Member[path]"]
    - ["system.int32", "microsoft.powershell.commands.foreachobjectcommand", "Member[timeoutseconds]"]
    - ["system.management.automation.psobject[]", "microsoft.powershell.commands.compareobjectcommand", "Member[referenceobject]"]
    - ["microsoft.powershell.commands.displayhinttype", "microsoft.powershell.commands.displayhinttype!", "Member[datetime]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[memberdefinition]"]
    - ["microsoft.powershell.commands.resetcapability", "microsoft.powershell.commands.resetcapability!", "Member[other]"]
    - ["system.string", "microsoft.powershell.commands.importworkflowcommand!", "Member[invalidpsparametercollectionadditionalerrormessage]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[terminalservices]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[options]"]
    - ["system.string[]", "microsoft.powershell.commands.getitemcommand", "Member[include]"]
    - ["system.string", "microsoft.powershell.commands.checkpointcomputercommand", "Member[restorepointtype]"]
    - ["system.string[]", "microsoft.powershell.commands.moveitempropertycommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.networkadapter", "Member[description]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[contains]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.filesystemcontentwriterdynamicparameters", "Member[nonewline]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.tracecommandcommand", "Member[force]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[millisecond]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[ossystemdirectory]"]
    - ["system.string", "microsoft.powershell.commands.enterpssessioncommand", "Member[vmname]"]
    - ["system.string[]", "microsoft.powershell.commands.gethotfixcommand", "Member[id]"]
    - ["system.string", "microsoft.powershell.commands.newvariablecommand", "Member[name]"]
    - ["system.management.automation.pstransportoption", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[transportoption]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[custommethod]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[imagealttextforegroundcolor]"]
    - ["system.management.automation.jobstate", "microsoft.powershell.commands.receivejobcommand", "Member[state]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.objectbase", "Member[inputobject]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[throttlelimit]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.basecsvwritingcommand", "Member[includetypeinformation]"]
    - ["system.management.automation.psmoduleinfo[]", "microsoft.powershell.commands.importmodulecommand", "Member[moduleinfo]"]
    - ["system.management.automation.runspaces.runspace", "microsoft.powershell.commands.debugrunspacecommand", "Member[runspace]"]
    - ["system.boolean", "microsoft.powershell.commands.moveitemcommand", "Member[providersupportsshouldprocess]"]
    - ["microsoft.powershell.commands.domainrole", "microsoft.powershell.commands.domainrole!", "Member[standaloneworkstation]"]
    - ["system.string[]", "microsoft.powershell.commands.removepsdrivecommand", "Member[literalname]"]
    - ["microsoft.powershell.commands.cpustatus", "microsoft.powershell.commands.cpustatus!", "Member[disabledbyuser]"]
    - ["microsoft.powershell.commands.wmistate", "microsoft.powershell.commands.wmistate!", "Member[failed]"]
    - ["system.string", "microsoft.powershell.commands.unprotectcmsmessagecommand", "Member[content]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[ascustomobject]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csdescription]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.readhostcommand", "Member[assecurestring]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablepssessionconfigurationcommand", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.addmembercommand", "Member[notepropertyname]"]
    - ["system.nullable<microsoft.powershell.commands.systemelementstate>", "microsoft.powershell.commands.computerinfo", "Member[cschassisbootupstate]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttohtmlcommand", "Member[transitional]"]
    - ["system.int32", "microsoft.powershell.commands.matchinfo", "Member[linenumber]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.teeobjectcommand", "Member[append]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[keyfilepath]"]
    - ["system.string", "microsoft.powershell.commands.itempropertycommandbase", "Member[filter]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[biossystembiosmajorversion]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[requiredgroups]"]
    - ["system.object[]", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[modulestoimport]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[csinstalldate]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getrandomcommand", "Member[shuffle]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csdaylightineffect]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[lynx]"]
    - ["system.string", "microsoft.powershell.commands.getmodulecommand", "Member[psedition]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[authenticating]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testpathcommand", "Member[isvalid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cnotcontains]"]
    - ["system.collections.generic.list<microsoft.powershell.commands.pspropertyexpressionresult>", "microsoft.powershell.commands.pspropertyexpression", "Method[getvalues].ReturnValue"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[undefined]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getmodulecommand", "Member[all]"]
    - ["microsoft.powershell.commands.hardwaresecurity", "microsoft.powershell.commands.hardwaresecurity!", "Member[disabled]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[runasvirtualaccountgroups]"]
    - ["system.string[]", "microsoft.powershell.commands.catalogcommandsbase", "Member[path]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowssmallbusinessserver2011essentials]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[powersavestandby]"]
    - ["system.string", "microsoft.powershell.commands.objecteventregistrationbase", "Method[getsourceobjecteventname].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.newitemcommand", "Member[itemtype]"]
    - ["system.int32[]", "microsoft.powershell.commands.getcomputerrestorepointcommand", "Member[restorepoint]"]
    - ["system.int64", "microsoft.powershell.commands.getcountercommand", "Member[maxsamples]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[disconnected]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericmeasureinfo", "Member[maximum]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[ascii]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[applicationname]"]
    - ["system.string", "microsoft.powershell.commands.resolvepathcommand", "Member[relativebasepath]"]
    - ["system.management.automation.errorrecord", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[errorrecord]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[string]"]
    - ["system.object", "microsoft.powershell.commands.functionprovider", "Method[setitemdynamicparameters].ReturnValue"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.webrequestpscmdlet", "Member[proxycredential]"]
    - ["microsoft.management.infrastructure.cimsession", "microsoft.powershell.commands.getmodulecommand", "Member[cimsession]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csnetworkservermodeenabled]"]
    - ["system.string[]", "microsoft.powershell.commands.geteventlogcommand", "Member[source]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.outgridviewcommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider", "Method[getchildname].ReturnValue"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.formathex", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.sendmailmessage", "Member[usessl]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getwmiobjectcommand", "Member[directread]"]
    - ["system.management.automation.psdriveinfo", "microsoft.powershell.commands.registryprovider", "Method[newdrive].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getaclcommand", "Member[audit]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxsessionsperworkflow]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosbuildnumber]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.unregistereventcommand", "Member[force]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[digitalunix]"]
    - ["system.int64", "microsoft.powershell.commands.getwineventcommand", "Member[maxevents]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.clearitemcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removevariablecommand", "Member[force]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[other]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablepsbreakpointcommand", "Member[passthru]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverstandardnohypervfull]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsbreakpointcommand", "Member[variable]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[sessionthrottlelimit]"]
    - ["system.boolean", "microsoft.powershell.commands.pssnapincommandbase", "Member[shouldgetall]"]
    - ["system.string[]", "microsoft.powershell.commands.getcountercommand", "Member[computername]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsembeddedindustry]"]
    - ["system.timespan", "microsoft.powershell.commands.startsleepcommand", "Member[duration]"]
    - ["system.string", "microsoft.powershell.commands.updatetypedatacommand", "Member[stringserializationsource]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[serverforsmallbusinessedition]"]
    - ["system.string[]", "microsoft.powershell.commands.clearvariablecommand", "Member[exclude]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[tpf]"]
    - ["system.string[]", "microsoft.powershell.commands.removealiascommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[wait]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[gt]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.language!", "Member[csharpversion2]"]
    - ["system.string[]", "microsoft.powershell.commands.setservicecommand", "Member[exclude]"]
    - ["system.string[]", "microsoft.powershell.commands.disablepssessionconfigurationcommand", "Member[name]"]
    - ["system.boolean", "microsoft.powershell.commands.psexecutioncmdlet", "Member[invokeanddisconnect]"]
    - ["system.uri", "microsoft.powershell.commands.receivepssessioncommand", "Member[connectionuri]"]
    - ["system.string[]", "microsoft.powershell.commands.psexecutioncmdlet", "Member[disconnectedsessionname]"]
    - ["system.string", "microsoft.powershell.commands.addcomputercommand", "Member[newname]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.language!", "Member[csharp]"]
    - ["system.string", "microsoft.powershell.commands.receivepssessioncommand", "Member[jobname]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[byte]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[enterpriseserveredition]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[sshtransport]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oslanguage]"]
    - ["system.string", "microsoft.powershell.commands.copyitempropertycommand", "Member[destination]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[oslocaldatetime]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[notlike]"]
    - ["system.string", "microsoft.powershell.commands.updatelistcommand", "Member[property]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.processor", "Member[numberofcores]"]
    - ["system.management.automation.provider.icontentreader", "microsoft.powershell.commands.sessionstateproviderbase", "Method[getcontentreader].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importcsvcommand", "Member[useculture]"]
    - ["system.string", "microsoft.powershell.commands.writeverbosecommand", "Member[message]"]
    - ["system.management.automation.pstracesourceoptions", "microsoft.powershell.commands.settracesourcecommand", "Member[option]"]
    - ["system.string[]", "microsoft.powershell.commands.waitjobcommand", "Member[command]"]
    - ["microsoft.powershell.commands.websslprotocol", "microsoft.powershell.commands.websslprotocol!", "Member[tls12]"]
    - ["microsoft.powershell.commands.clipboardformat", "microsoft.powershell.commands.getclipboardcommand", "Member[format]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[notready]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxactivityprocesses]"]
    - ["system.string", "microsoft.powershell.commands.getpssessioncapabilitycommand", "Member[username]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removecomputercommand", "Member[force]"]
    - ["system.int32", "microsoft.powershell.commands.selectobjectcommand", "Member[skip]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outgridviewcommand", "Member[wait]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[useragent]"]
    - ["microsoft.powershell.commands.websslprotocol", "microsoft.powershell.commands.websslprotocol!", "Member[default]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psobject>", "microsoft.powershell.commands.groupinfo", "Member[group]"]
    - ["system.net.cookiecontainer", "microsoft.powershell.commands.webrequestsession", "Member[cookies]"]
    - ["system.security.securestring", "microsoft.powershell.commands.convertfromsecurestringcommand", "Member[securestring]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[powersavewarning]"]
    - ["system.object", "microsoft.powershell.commands.registerwmieventcommand", "Method[getsourceobject].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.geteventcommand", "Member[eventidentifier]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[contenttype]"]
    - ["system.string", "microsoft.powershell.commands.commonrunspacecommandbase!", "Member[processnameparameterset]"]
    - ["microsoft.powershell.commands.servicestartuptype", "microsoft.powershell.commands.servicestartuptype!", "Member[invalidvalue]"]
    - ["system.string[]", "microsoft.powershell.commands.selectxmlcommand", "Member[path]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.filesystemprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.setservicecommand", "Member[securitydescriptorsddl]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[outofprocessactivity]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosserialnumber]"]
    - ["system.datetime", "microsoft.powershell.commands.getjobcommand", "Member[before]"]
    - ["system.string[]", "microsoft.powershell.commands.sendmailmessage", "Member[to]"]
    - ["microsoft.powershell.commands.sessionfilterstate", "microsoft.powershell.commands.sessionfilterstate!", "Member[broken]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.aliasprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["system.datetime", "microsoft.powershell.commands.geteventlogcommand", "Member[before]"]
    - ["system.int32[]", "microsoft.powershell.commands.debugprocesscommand", "Member[id]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[skipcertificatecheck]"]
    - ["system.management.automation.remoting.pssessionoption", "microsoft.powershell.commands.startjobcommand", "Member[sessionoption]"]
    - ["system.consolecolor", "microsoft.powershell.commands.consolecolorcmdlet", "Member[backgroundcolor]"]
    - ["system.string[]", "microsoft.powershell.commands.getmembercommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.commonrunspacecommandbase!", "Member[runspaceparameterset]"]
    - ["system.io.stream", "microsoft.powershell.commands.getfilehashcommand", "Member[inputstream]"]
    - ["system.io.memorystream", "microsoft.powershell.commands.webresponseobject", "Member[rawcontentstream]"]
    - ["system.int32", "microsoft.powershell.commands.invokerestmethodcommand", "Member[maximumfollowrellink]"]
    - ["system.string", "microsoft.powershell.commands.getwmiobjectcommand", "Member[class]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[getpropertydynamicparameters].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.writeprogresscommand", "Member[status]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.convertfrommarkdowncommand", "Member[asvt100encodedstring]"]
    - ["system.nullable<microsoft.powershell.commands.serverlevel>", "microsoft.powershell.commands.computerinfo", "Member[osserverlevel]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[mtusize]"]
    - ["system.string", "microsoft.powershell.commands.exportcsvcommand", "Member[path]"]
    - ["microsoft.powershell.commands.firmwaretype", "microsoft.powershell.commands.firmwaretype!", "Member[max]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsproductid]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[interactiveunix]"]
    - ["system.string", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[username]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[dmaprotection]"]
    - ["microsoft.powershell.commands.updatehelpscope", "microsoft.powershell.commands.updatehelpscope!", "Member[currentuser]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxsessions]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure[]", "microsoft.powershell.commands.computerinfo", "Member[deviceguardavailablesecurityproperties]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.neweventcommand", "Member[messagedata]"]
    - ["system.int32", "microsoft.powershell.commands.writeprogresscommand", "Member[id]"]
    - ["system.string", "microsoft.powershell.commands.addmembercommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cin]"]
    - ["system.int32", "microsoft.powershell.commands.getcontentcommand", "Member[tail]"]
    - ["system.boolean", "microsoft.powershell.commands.webrequestpscmdlet", "Method[verifyinternetexploreravailable].ReturnValue"]
    - ["system.object", "microsoft.powershell.commands.setaclcommand", "Member[aclobject]"]
    - ["system.string", "microsoft.powershell.commands.newpsdrivecommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[keyfilepath]"]
    - ["system.int32[]", "microsoft.powershell.commands.selectobjectcommand", "Member[skipindex]"]
    - ["system.string", "microsoft.powershell.commands.getwmiobjectcommand", "Member[filter]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[theme]"]
    - ["system.int32", "microsoft.powershell.commands.enterpssessioncommand", "Member[id]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[poweroff]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathcontaineridparameterset]"]
    - ["system.string[]", "microsoft.powershell.commands.selectobjectcommand", "Member[excludeproperty]"]
    - ["system.string", "microsoft.powershell.commands.registerobjecteventcommand", "Method[getsourceobjecteventname].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.compareobjectcommand", "Member[syncwindow]"]
    - ["microsoft.powershell.commands.breakpointtype", "microsoft.powershell.commands.breakpointtype!", "Member[command]"]
    - ["system.management.managementobject", "microsoft.powershell.commands.removewmiobject", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.neweventcommand", "Member[sourceidentifier]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[containeridparameterset]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[username]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverenterprisenohypervfull]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cge]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Member[filename]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[getcontentwriterdynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[proxyusedefaultcredentials]"]
    - ["system.management.automation.pstracesourceoptions", "microsoft.powershell.commands.tracecommandcommand", "Member[option]"]
    - ["system.string", "microsoft.powershell.commands.pshostprocessinfo", "Member[processname]"]
    - ["system.string", "microsoft.powershell.commands.commonrunspacecommandbase", "Member[processname]"]
    - ["system.string", "microsoft.powershell.commands.bytecollection", "Member[label]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.compareobjectcommand", "Member[includeequal]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.getwineventcommand", "Member[credential]"]
    - ["system.object", "microsoft.powershell.commands.setvariablecommand", "Member[value]"]
    - ["system.string", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[copyright]"]
    - ["system.guid[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[vmid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newmodulecommand", "Member[returnresult]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getchilditemcommand", "Member[name]"]
    - ["system.management.automation.cmsmessagerecipient[]", "microsoft.powershell.commands.unprotectcmsmessagecommand", "Member[to]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[opentimeout]"]
    - ["system.string", "microsoft.powershell.commands.getdatecommand", "Member[format]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.starttranscriptcommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.contentcommandbase", "Member[exclude]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[processidletimeoutsec]"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[transcriptdirectory]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[runascredential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startprocesscommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.groupobjectcommand", "Member[ashashtable]"]
    - ["system.int32[]", "microsoft.powershell.commands.selectobjectcommand", "Member[index]"]
    - ["system.string", "microsoft.powershell.commands.teeobjectcommand", "Member[variable]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[resume]"]
    - ["system.int32", "microsoft.powershell.commands.geteventsubscribercommand", "Member[subscriptionid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getprocesscommand", "Member[fileversioninfo]"]
    - ["system.string[]", "microsoft.powershell.commands.getcommandcommand", "Member[module]"]
    - ["system.net.iwebproxy", "microsoft.powershell.commands.webrequestsession", "Member[proxy]"]
    - ["system.string", "microsoft.powershell.commands.hashcmdletbase", "Member[algorithm]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[enterpriseserver]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osdistributed]"]
    - ["microsoft.powershell.commands.softwareelementstate", "microsoft.powershell.commands.softwareelementstate!", "Member[deployable]"]
    - ["system.management.automation.psmemberviewtypes", "microsoft.powershell.commands.getmembercommand", "Member[view]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.startprocesscommand", "Member[workingdirectory]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.connectpssessioncommand", "Member[credential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.writeoutputcommand", "Member[noenumerate]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.basecsvwritingcommand", "Member[notypeinformation]"]
    - ["system.int32", "microsoft.powershell.commands.newtimespancommand", "Member[milliseconds]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.waitjobcommand", "Member[force]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.receivepssessioncommand", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.pshostprocessinfo", "Method[getpipenamefilepath].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.psrunspacedebug", "Member[runspacename]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[sohoserver]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[hypervrequirementsecondleveladdresstranslation]"]
    - ["system.object[]", "microsoft.powershell.commands.getrandomcommand", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[dscresourcestoexport]"]
    - ["system.string", "microsoft.powershell.commands.functionprovider!", "Member[providername]"]
    - ["system.string[]", "microsoft.powershell.commands.getpfxcertificatecommand", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.sortobjectcommand", "Member[stable]"]
    - ["system.string[]", "microsoft.powershell.commands.getitemcommand", "Member[literalpath]"]
    - ["system.security.accesscontrol.objectsecurity", "microsoft.powershell.commands.filesystemprovider", "Method[newsecuritydescriptorfrompath].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.webrequestpscmdlet", "Member[timeoutsec]"]
    - ["system.string", "microsoft.powershell.commands.helpnotfoundexception", "Member[message]"]
    - ["microsoft.powershell.commands.sessionfilterstate", "microsoft.powershell.commands.getpssessioncommand", "Member[state]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsproductname]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[win98]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Method[relativepath].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.pshostprocessinfo", "Member[processid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.writehostcommand", "Member[nonewline]"]
    - ["system.string", "microsoft.powershell.commands.getcmsmessagecommand", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.moveitemcommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[subsystem]"]
    - ["system.int32[]", "microsoft.powershell.commands.psbreakpointcommandbase", "Member[id]"]
    - ["microsoft.powershell.commands.processortype", "microsoft.powershell.commands.processortype!", "Member[other]"]
    - ["system.string", "microsoft.powershell.commands.poplocationcommand", "Member[stackname]"]
    - ["system.string", "microsoft.powershell.commands.debugjobcommand", "Member[name]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.exportclixmlcommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[configurationname]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[bioslanguageedition]"]
    - ["system.string[]", "microsoft.powershell.commands.selectstringcommand", "Member[pattern]"]
    - ["system.uri", "microsoft.powershell.commands.newwebserviceproxy", "Member[uri]"]
    - ["system.string", "microsoft.powershell.commands.newservicecommand", "Member[securitydescriptorsddl]"]
    - ["system.datetime", "microsoft.powershell.commands.getdatecommand", "Member[date]"]
    - ["system.string", "microsoft.powershell.commands.jsonobject!", "Method[converttojson].ReturnValue"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.invokecommandcommand", "Member[scriptblock]"]
    - ["system.string[]", "microsoft.powershell.commands.setitemcommand", "Member[include]"]
    - ["system.string[]", "microsoft.powershell.commands.gettracesourcecommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[usesharedprocess]"]
    - ["microsoft.powershell.commands.deviceguardconfigcodeintegritystatus", "microsoft.powershell.commands.deviceguardconfigcodeintegritystatus!", "Member[enforcementmode]"]
    - ["system.int32", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[connectingtimeout]"]
    - ["system.string", "microsoft.powershell.commands.geteventcommand", "Member[sourceidentifier]"]
    - ["system.string", "microsoft.powershell.commands.resetcomputermachinepasswordcommand", "Member[server]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[formatstoprocess]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setvariablecommand", "Member[passthru]"]
    - ["system.nullable<microsoft.powershell.commands.pcsystemtypeex>", "microsoft.powershell.commands.computerinfo", "Member[cspcsystemtypeex]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[workingdirectory]"]
    - ["system.string", "microsoft.powershell.commands.invokerestmethodcommand", "Member[responseheadersvariable]"]
    - ["system.guid", "microsoft.powershell.commands.debugjobcommand", "Member[instanceid]"]
    - ["system.string", "microsoft.powershell.commands.writeprogresscommand", "Member[currentoperation]"]
    - ["system.nullable<microsoft.powershell.commands.hardwaresecurity>", "microsoft.powershell.commands.computerinfo", "Member[csfrontpanelresetstatus]"]
    - ["system.int32", "microsoft.powershell.commands.getpssessioncommand", "Member[port]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startprocesscommand", "Member[wait]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.unregisterpssessionconfigurationcommand", "Member[noservicerestart]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[homeserveredition]"]
    - ["system.string[]", "microsoft.powershell.commands.getitemcommand", "Member[path]"]
    - ["microsoft.powershell.commands.waitforservicetypes", "microsoft.powershell.commands.waitforservicetypes!", "Member[winrm]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[visiblealiases]"]
    - ["system.string[]", "microsoft.powershell.commands.copyitempropertycommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsmobile]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttohtmlcommand", "Member[fragment]"]
    - ["system.string[]", "microsoft.powershell.commands.testpathcommand", "Member[include]"]
    - ["system.string", "microsoft.powershell.commands.importpssessioncommand", "Member[prefix]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[timetolive]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[oem]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommandbase", "Member[memberdefinition]"]
    - ["system.xml.xmlnode[]", "microsoft.powershell.commands.selectxmlcommand", "Member[xml]"]
    - ["system.nullable<system.management.automation.runspaces.outputbufferingmode>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[outputbufferingmode]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startjobcommand", "Member[allowredirection]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[runasadministrator]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[osservicepackmajorversion]"]
    - ["system.management.automation.provider.icontentwriter", "microsoft.powershell.commands.filesystemprovider", "Method[getcontentwriter].ReturnValue"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[timedpoweronsupported]"]
    - ["system.string", "microsoft.powershell.commands.importmodulecommand", "Member[scope]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverdatacenternohypervfull]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverstandardnohypervcore]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[ncr3000]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[configurationtypename]"]
    - ["system.object", "microsoft.powershell.commands.updatetypedatacommand", "Member[secondvalue]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[fullyqualifiedmodule]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[maxhops]"]
    - ["system.string[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[containerid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[isnot]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.addtypecommandbase", "Member[language]"]
    - ["system.string[]", "microsoft.powershell.commands.selectstringcommand", "Member[exclude]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[allowclobber]"]
    - ["system.string", "microsoft.powershell.commands.testconnectioncommand", "Member[wsmanauthentication]"]
    - ["microsoft.powershell.commands.basecsvwritingcommand+quotekind", "microsoft.powershell.commands.basecsvwritingcommand", "Member[usequotes]"]
    - ["system.string[]", "microsoft.powershell.commands.importworkflowcommand", "Member[dependentworkflow]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.removecomputercommand", "Member[unjoindomaincredential]"]
    - ["system.string", "microsoft.powershell.commands.removeservicecommand", "Member[name]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[proxyauthentication]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.newservicecommand", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.getcmsmessagecommand", "Member[path]"]
    - ["system.boolean", "microsoft.powershell.commands.tracelistenercommandbase", "Member[forcewrite]"]
    - ["system.int32", "microsoft.powershell.commands.formatwidecommand", "Member[column]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.gethelpcommand", "Member[examples]"]
    - ["system.object[]", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[argumentlist]"]
    - ["system.string[]", "microsoft.powershell.commands.clearitemcommand", "Member[exclude]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[bs2000]"]
    - ["system.nullable<microsoft.powershell.commands.deviceguardconfigcodeintegritystatus>", "microsoft.powershell.commands.deviceguard", "Member[codeintegritypolicyenforcementstatus]"]
    - ["system.string", "microsoft.powershell.commands.removeeventcommand", "Member[sourceidentifier]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[preserveauthorizationonredirect]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.geteventsubscribercommand", "Member[force]"]
    - ["system.int32", "microsoft.powershell.commands.outfilecommand", "Member[width]"]
    - ["system.string[]", "microsoft.powershell.commands.getpfxcertificatecommand", "Member[filepath]"]
    - ["system.int32", "microsoft.powershell.commands.sendmailmessage", "Member[port]"]
    - ["microsoft.powershell.commands.outtarget", "microsoft.powershell.commands.receivepssessioncommand", "Member[outtarget]"]
    - ["system.string[]", "microsoft.powershell.commands.newitemcommand", "Member[path]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageserverstandardcore]"]
    - ["system.int32", "microsoft.powershell.commands.restartcomputercommand", "Member[throttlelimit]"]
    - ["system.string", "microsoft.powershell.commands.x509storelocation", "Member[locationname]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[linux]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[second]"]
    - ["microsoft.powershell.commands.websslprotocol", "microsoft.powershell.commands.websslprotocol!", "Member[tls]"]
    - ["system.int32", "microsoft.powershell.commands.connectpssessioncommand", "Member[throttlelimit]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.clearrecyclebincommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newwebserviceproxy", "Member[usedefaultcredential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setclipboardcommand", "Member[ashtml]"]
    - ["system.boolean", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[persistwithencryption]"]
    - ["system.string", "microsoft.powershell.commands.moveitemcommand", "Member[filter]"]
    - ["microsoft.powershell.commands.systemelementstate", "microsoft.powershell.commands.systemelementstate!", "Member[safe]"]
    - ["system.management.authenticationlevel", "microsoft.powershell.commands.restartcomputercommand", "Member[dcomauthentication]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newvariablecommand", "Member[force]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.updatehelpcommand", "Member[fullyqualifiedmodule]"]
    - ["system.string[]", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getallcentralaccesspolicies].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[timeoutseconds]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[computernameparameterset]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removecomputercommand", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.sendmailmessage", "Member[bcc]"]
    - ["system.collections.idictionary[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[aliasdefinitions]"]
    - ["system.uri[]", "microsoft.powershell.commands.startjobcommand", "Member[connectionuri]"]
    - ["microsoft.powershell.commands.outputassemblytype", "microsoft.powershell.commands.addtypecommandbase", "Member[outputtype]"]
    - ["system.int32[]", "microsoft.powershell.commands.waitprocesscommand", "Member[id]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[vmidparameterset]"]
    - ["microsoft.powershell.commands.frontpanelresetstatus", "microsoft.powershell.commands.frontpanelresetstatus!", "Member[disabled]"]
    - ["system.object", "microsoft.powershell.commands.sessionstateproviderbase", "Method[getcontentwriterdynamicparameters].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.signaturecommandsbase", "Member[filepath]"]
    - ["system.string", "microsoft.powershell.commands.removewmiobject", "Member[class]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemcontentdynamicparametersbase", "Member[usingbyteencoding]"]
    - ["system.string[]", "microsoft.powershell.commands.converttohtmlcommand", "Member[body]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[quiet]"]
    - ["system.guid[]", "microsoft.powershell.commands.commonrunspacecommandbase", "Member[runspaceinstanceid]"]
    - ["system.string[]", "microsoft.powershell.commands.geteventlogcommand", "Member[computername]"]
    - ["microsoft.powershell.commands.frontpanelresetstatus", "microsoft.powershell.commands.frontpanelresetstatus!", "Member[enabled]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[raw]"]
    - ["system.version", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[dotnetframeworkversion]"]
    - ["microsoft.powershell.commands.openmode", "microsoft.powershell.commands.openmode!", "Member[new]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.startjobcommand", "Member[initializationscript]"]
    - ["system.string", "microsoft.powershell.commands.renamecomputerchangeinfo", "Member[oldcomputername]"]
    - ["system.string[]", "microsoft.powershell.commands.serviceoperationbasecommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[typestoprocess]"]
    - ["system.string[]", "microsoft.powershell.commands.selectxmlcommand", "Member[content]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[cssupportcontactdescription]"]
    - ["system.management.automation.commandtypes", "microsoft.powershell.commands.getcommandcommand", "Member[commandtype]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[disablenamechecking]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure[]", "microsoft.powershell.commands.deviceguard", "Member[requiredsecurityproperties]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxsessionsperworkflow]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemprovider", "Method[isvalidpath].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[allowredirection]"]
    - ["system.collections.idictionary[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[functiondefinitions]"]
    - ["system.string[]", "microsoft.powershell.commands.resolvepathcommand", "Member[literalpath]"]
    - ["system.management.automation.psmembertypes", "microsoft.powershell.commands.getmembercommand", "Member[membertype]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[leaf]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[sshtransport]"]
    - ["system.string[]", "microsoft.powershell.commands.moveitemcommand", "Member[literalpath]"]
    - ["system.timezoneinfo", "microsoft.powershell.commands.settimezonecommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.updatehelpscope", "microsoft.powershell.commands.updatablehelpcommandbase", "Member[scope]"]
    - ["system.string", "microsoft.powershell.commands.exportclixmlcommand", "Member[encoding]"]
    - ["system.string", "microsoft.powershell.commands.helpcategoryinvalidexception", "Member[helpcategory]"]
    - ["microsoft.powershell.commands.outputmodeoption", "microsoft.powershell.commands.outputmodeoption!", "Member[none]"]
    - ["system.string[]", "microsoft.powershell.commands.tracecommandcommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.addcomputercommand", "Member[workgroupname]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[header5color]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[year]"]
    - ["microsoft.powershell.commands.sessionfilterstate", "microsoft.powershell.commands.sessionfilterstate!", "Member[all]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startprocesscommand", "Member[nonewwindow]"]
    - ["system.nullable<microsoft.powershell.commands.foregroundapplicationboost>", "microsoft.powershell.commands.computerinfo", "Member[osforegroundapplicationboost]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.disablepssessionconfigurationcommand", "Member[noservicerestart]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.basecsvwritingcommand", "Member[useculture]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageserverenterprisecore]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericmeasureinfo", "Member[minimum]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[subsystem]"]
    - ["system.string", "microsoft.powershell.commands.testjsoncommand", "Member[json]"]
    - ["system.string", "microsoft.powershell.commands.receivepssessioncommand", "Member[configurationname]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[csphysicallyinstalledmemory]"]
    - ["microsoft.powershell.commands.outputmodeoption", "microsoft.powershell.commands.outputmodeoption!", "Member[single]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommandbase", "Member[outputassembly]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[clt]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[wince]"]
    - ["microsoft.powershell.commands.softwareelementstate", "microsoft.powershell.commands.softwareelementstate!", "Member[installable]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.renameitemcommand", "Member[passthru]"]
    - ["system.guid[]", "microsoft.powershell.commands.getpssessioncommand", "Member[instanceid]"]
    - ["system.datetime", "microsoft.powershell.commands.importcountercommand", "Member[starttime]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.networkadapter", "Member[connectionstatus]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outfilecommand", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.gethelpcommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.connectpssessioncommand", "Member[configurationname]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[epoc]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[utf7]"]
    - ["system.string", "microsoft.powershell.commands.psuseragent!", "Member[safari]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[allowedactivity]"]
    - ["system.string", "microsoft.powershell.commands.exportcsvcommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[scriptstoprocess]"]
    - ["system.string", "microsoft.powershell.commands.geteventpssnapin", "Member[description]"]
    - ["system.management.automation.provider.icontentreader", "microsoft.powershell.commands.filesystemprovider", "Method[getcontentreader].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.getfilehashcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.filesystemclearcontentdynamicparameters", "Member[stream]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[session]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.contentcommandbase", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosstatus]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[datacenteredition]"]
    - ["microsoft.powershell.commands.adminpasswordstatus", "microsoft.powershell.commands.adminpasswordstatus!", "Member[unknown]"]
    - ["system.string[]", "microsoft.powershell.commands.importmodulecommand", "Member[alias]"]
    - ["system.nullable<system.timespan>", "microsoft.powershell.commands.computerinfo", "Member[osuptime]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.getmodulecommand", "Member[fullyqualifiedname]"]
    - ["system.boolean", "microsoft.powershell.commands.registryprovider", "Method[isvalidpath].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.copyitempropertycommand", "Member[path]"]
    - ["system.int32[]", "microsoft.powershell.commands.psbreakpointupdatercommandbase", "Member[id]"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[description]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[qnx]"]
    - ["system.collections.generic.dictionary<system.string,system.string>", "microsoft.powershell.commands.formobject", "Member[fields]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[algorithmtypenotsupported]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getpssessionconfigurationcommand", "Member[force]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[osfreevirtualmemory]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getclipboardcommand", "Member[raw]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.objecteventregistrationbase", "Member[action]"]
    - ["microsoft.powershell.commands.deviceguardsoftwaresecure[]", "microsoft.powershell.commands.deviceguard", "Member[securityservicesconfigured]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.foreachobjectcommand", "Member[usenewrunspace]"]
    - ["system.int64", "microsoft.powershell.commands.webresponseobject", "Member[rawcontentlength]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.getcommandcommand", "Member[fullyqualifiedmodule]"]
    - ["microsoft.powershell.commands.outputassemblytype", "microsoft.powershell.commands.outputassemblytype!", "Member[library]"]
    - ["system.string[]", "microsoft.powershell.commands.geteventlogcommand", "Member[entrytype]"]
    - ["system.string[]", "microsoft.powershell.commands.psexecutioncmdlet", "Member[vmname]"]
    - ["system.string", "microsoft.powershell.commands.setitempropertycommand", "Member[name]"]
    - ["system.management.automation.runspaces.pssession", "microsoft.powershell.commands.enterpssessioncommand", "Member[session]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addcomputercommand", "Member[restart]"]
    - ["system.int64", "microsoft.powershell.commands.historyinfo", "Member[id]"]
    - ["system.object", "microsoft.powershell.commands.getrandomcommandbase", "Member[minimum]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider!", "Method[lastwritetimestring].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[certificatethumbprint]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addtypecommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[le]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.copyitemcommand", "Member[recurse]"]
    - ["system.string", "microsoft.powershell.commands.debugrunspacecommand", "Member[name]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[apmtimer]"]
    - ["system.string[]", "microsoft.powershell.commands.updatehelpcommand", "Member[sourcepath]"]
    - ["system.collections.generic.ienumerable<system.management.automation.completionresult>", "microsoft.powershell.commands.experimentalfeaturenamecompleter", "Method[completeargument].ReturnValue"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.jobcmdletbase", "Member[filter]"]
    - ["system.int32", "microsoft.powershell.commands.getcommandcommand", "Member[totalcount]"]
    - ["system.string[]", "microsoft.powershell.commands.variablecommandbase", "Member[includefilters]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[csoemstringarray]"]
    - ["system.string", "microsoft.powershell.commands.enterpssessioncommand", "Member[hostname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cnotin]"]
    - ["system.string[]", "microsoft.powershell.commands.getpssessioncommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.enterpssessioncommand", "Member[containerid]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.foreachobjectcommand", "Member[inputobject]"]
    - ["system.collections.generic.dictionary<system.guid,system.management.automation.runspaces.pssession>", "microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspaces].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.commonrunspacecommandbase", "Member[appdomainname]"]
    - ["system.string[]", "microsoft.powershell.commands.implicitremotingcommandbase", "Member[formattypename]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure[]", "microsoft.powershell.commands.deviceguard", "Member[availablesecurityproperties]"]
    - ["system.reflection.assembly[]", "microsoft.powershell.commands.importmodulecommand", "Member[assembly]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcomputerrestorepointcommand", "Member[laststatus]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removealiascommand", "Member[force]"]
    - ["system.management.impersonationlevel", "microsoft.powershell.commands.testconnectioncommand", "Member[impersonation]"]
    - ["system.string", "microsoft.powershell.commands.psrunspacecmdlet!", "Member[idparameterset]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[os9]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.groupobjectcommand", "Member[noelement]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider!", "Method[namestring].ReturnValue"]
    - ["microsoft.powershell.commands.processortype", "microsoft.powershell.commands.processortype!", "Member[mathprocessor]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsthinpc]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.readhostcommand", "Member[maskinput]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericobjectmeasureinfo", "Member[average]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider!", "Method[mode].ReturnValue"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.enterpssessioncommand", "Member[credential]"]
    - ["system.double", "microsoft.powershell.commands.showcommandcommand", "Member[height]"]
    - ["system.object", "microsoft.powershell.commands.aliasprovider", "Method[newitemdynamicparameters].ReturnValue"]
    - ["system.text.encoding", "microsoft.powershell.commands.formathex", "Member[encoding]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.addmembercommand", "Member[notepropertymembers]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.foreachobjectcommand", "Member[end]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.measureobjectcommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.outputassemblytype", "microsoft.powershell.commands.outputassemblytype!", "Member[consoleapplication]"]
    - ["system.string[]", "microsoft.powershell.commands.matchinfocontext", "Member[postcontext]"]
    - ["microsoft.powershell.commands.exportaliasformat", "microsoft.powershell.commands.exportaliascommand", "Member[as]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[mips]"]
    - ["system.text.encoding", "microsoft.powershell.commands.basichtmlwebresponseobject", "Member[encoding]"]
    - ["microsoft.win32.registryvaluekind", "microsoft.powershell.commands.registryprovidersetitemdynamicparameter", "Member[type]"]
    - ["system.string[]", "microsoft.powershell.commands.cleareventlogcommand", "Member[logname]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.corecommandwithcredentialsbase", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oscodeset]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[canceltimeout]"]
    - ["system.string", "microsoft.powershell.commands.writealiascommandbase", "Member[scope]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[assemblyname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setclipboardcommand", "Member[append]"]
    - ["system.reflection.processorarchitecture", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[processorarchitecture]"]
    - ["system.int32", "microsoft.powershell.commands.genericobjectmeasureinfo", "Member[count]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportformatdatacommand", "Member[noclobber]"]
    - ["system.string", "microsoft.powershell.commands.sendmailmessage", "Member[smtpserver]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.webcmdletelementcollection", "Method[find].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.renamecomputercommand", "Member[wsmanauthentication]"]
    - ["system.string", "microsoft.powershell.commands.pshostprocessinfo", "Member[appdomainname]"]
    - ["system.globalization.cultureinfo", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[uiculture]"]
    - ["system.datetime", "microsoft.powershell.commands.historyinfo", "Member[startexecutiontime]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[idletimeoutsec]"]
    - ["system.guid", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[guid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getuniquecommand", "Member[caseinsensitive]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[usewindowspowershell]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.renamecomputercommand", "Member[domaincredential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startjobcommand", "Member[sshtransport]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsembeddedhandheld]"]
    - ["system.string", "microsoft.powershell.commands.wmibasecmdlet", "Member[authority]"]
    - ["system.string", "microsoft.powershell.commands.updatetypedatacommand", "Member[serializationmethod]"]
    - ["system.string", "microsoft.powershell.commands.renamecomputerchangeinfo", "Method[tostring].ReturnValue"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.usetransactioncommand", "Member[transactedscript]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[unicode]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[ostotalswapspacesize]"]
    - ["system.string[]", "microsoft.powershell.commands.getitempropertyvaluecommand", "Member[name]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[smallbusinessserverrestricted]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.renamecomputercommand", "Member[passthru]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[aix]"]
    - ["system.string[]", "microsoft.powershell.commands.psexecutioncmdlet", "Member[containerid]"]
    - ["system.uri", "microsoft.powershell.commands.enterpssessioncommand", "Member[connectionuri]"]
    - ["microsoft.powershell.commands.resetcapability", "microsoft.powershell.commands.resetcapability!", "Member[notimplemented]"]
    - ["system.string", "microsoft.powershell.commands.copyitemcommand", "Member[filter]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.selectobjectcommand", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.testpathcommand", "Member[path]"]
    - ["system.boolean", "microsoft.powershell.commands.dnsnamerepresentation", "Method[equals].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[computername]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[mobile]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.geterrorcommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathsshhosthashparameterset]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.invokecommandcommand", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.getpsdrivecommand", "Member[scope]"]
    - ["system.int32[]", "microsoft.powershell.commands.commonrunspacecommandbase", "Member[runspaceid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[line]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsdrivecommand", "Member[literalname]"]
    - ["system.string", "microsoft.powershell.commands.psremotingbasecmdlet!", "Member[uriparameterset]"]
    - ["system.object[]", "microsoft.powershell.commands.psexecutioncmdlet", "Member[argumentlist]"]
    - ["system.management.automation.pstypename[]", "microsoft.powershell.commands.getcommandcommand", "Member[parametertype]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorcommandsbase", "Member[filter]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.filesystemitemproviderdynamicparameters", "Member[newerthan]"]
    - ["system.string", "microsoft.powershell.commands.registryprovider", "Method[getchildname].ReturnValue"]
    - ["system.char", "microsoft.powershell.commands.importcsvcommand", "Member[delimiter]"]
    - ["system.string", "microsoft.powershell.commands.testjsoncommand", "Member[schema]"]
    - ["system.version", "microsoft.powershell.commands.modulespecification", "Member[requiredversion]"]
    - ["microsoft.powershell.commands.updatehelpscope", "microsoft.powershell.commands.updatehelpscope!", "Member[allusers]"]
    - ["system.string[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[assembliestoload]"]
    - ["system.string", "microsoft.powershell.commands.objectcmdletbase", "Member[culture]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[powersavingmodesenteredautomatically]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.waitjobcommand", "Member[any]"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[path]"]
    - ["system.int32", "microsoft.powershell.commands.newfilecatalogcommand", "Member[catalogversion]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.receivepssessioncommand", "Member[authentication]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowseditionid]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[accountcreate]"]
    - ["system.int32", "microsoft.powershell.commands.outstringcommand", "Member[width]"]
    - ["system.object", "microsoft.powershell.commands.updatetypedatacommand", "Member[value]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.objecteventregistrationbase", "Member[forward]"]
    - ["system.management.automation.psdriveinfo", "microsoft.powershell.commands.filesystemprovider", "Method[removedrive].ReturnValue"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.setitempropertycommand", "Member[inputobject]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericmeasureinfo", "Member[standarddeviation]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powersavelowpowermode]"]
    - ["system.text.regularexpressions.match[]", "microsoft.powershell.commands.matchinfo", "Member[matches]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setlocationcommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.setservicecommand", "Member[name]"]
    - ["system.diagnostics.overflowaction", "microsoft.powershell.commands.limiteventlogcommand", "Member[overflowaction]"]
    - ["system.boolean", "microsoft.powershell.commands.removepsdrivecommand", "Member[providersupportsshouldprocess]"]
    - ["system.string[]", "microsoft.powershell.commands.multipleservicecommandbase", "Member[displayname]"]
    - ["system.uri[]", "microsoft.powershell.commands.invokecommandcommand", "Member[connectionuri]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[mint]"]
    - ["system.string", "microsoft.powershell.commands.catalogcommandsbase", "Member[catalogfilepath]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csstatus]"]
    - ["system.int32", "microsoft.powershell.commands.groupinfo", "Member[count]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[attunix]"]
    - ["system.string[]", "microsoft.powershell.commands.setservicecommand", "Member[include]"]
    - ["microsoft.powershell.commands.hotfix[]", "microsoft.powershell.commands.computerinfo", "Member[oshotfixes]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[other]"]
    - ["system.string[]", "microsoft.powershell.commands.updatetypedatacommand", "Member[defaultdisplaypropertyset]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[configurationname]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathcomputernameparameterset]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oscountrycode]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csname]"]
    - ["system.guid", "microsoft.powershell.commands.debugrunspacecommand", "Member[instanceid]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[ueficodereadonly]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testfilecatalogcommand", "Member[detailed]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathuriparameterset]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.environmentprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["system.management.automation.jobstate", "microsoft.powershell.commands.getjobcommand", "Member[childjobstate]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setpsdebugcommand", "Member[step]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.pushlocationcommand", "Member[passthru]"]
    - ["system.object[]", "microsoft.powershell.commands.converttohtmlcommand", "Member[property]"]
    - ["microsoft.powershell.commands.systemelementstate", "microsoft.powershell.commands.systemelementstate!", "Member[nonrecoverable]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osorganization]"]
    - ["system.string", "microsoft.powershell.commands.geteventpssnapin", "Member[vendor]"]
    - ["system.int32", "microsoft.powershell.commands.waiteventcommand", "Member[timeout]"]
    - ["system.nullable<microsoft.powershell.commands.dataexecutionpreventionsupportpolicy>", "microsoft.powershell.commands.computerinfo", "Member[osdataexecutionpreventionsupportpolicy]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[biosinstallablelanguages]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importpowershelldatafilecommand", "Member[skiplimitcheck]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[ixworks]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[username]"]
    - ["system.object", "microsoft.powershell.commands.getrandomcommand", "Member[minimum]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[workstation]"]
    - ["system.string", "microsoft.powershell.commands.corecommandbase", "Member[filter]"]
    - ["system.net.mail.deliverynotificationoptions", "microsoft.powershell.commands.sendmailmessage", "Member[deliverynotificationoption]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider", "Method[getparentpath].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.getpssessioncommand", "Member[throttlelimit]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oslocaleid]"]
    - ["system.string", "microsoft.powershell.commands.renameitemcommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.convertfrommarkdowncommand", "Member[path]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[post]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[helpinfouri]"]
    - ["system.string[]", "microsoft.powershell.commands.removevariablecommand", "Member[exclude]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsregisteredowner]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[bioscaption]"]
    - ["system.string", "microsoft.powershell.commands.addcomputercommand", "Member[server]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[functionstoexport]"]
    - ["system.int32", "microsoft.powershell.commands.getrandomcommand", "Member[count]"]
    - ["system.boolean", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[runasvirtualaccountspecified]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[netbsd]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newitemcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.filesystemcontentreaderdynamicparameters", "Member[raw]"]
    - ["system.nullable<microsoft.powershell.commands.bootoptionaction>", "microsoft.powershell.commands.computerinfo", "Member[csbootoptiononwatchdog]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[notinstalled]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setclipboardcommand", "Member[asosc52]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removemodulecommand", "Member[force]"]
    - ["system.boolean", "microsoft.powershell.commands.certificateprovider", "Method[itemexists].ReturnValue"]
    - ["microsoft.powershell.commands.testpathtype", "microsoft.powershell.commands.testpathtype!", "Member[any]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectobjectcommand", "Member[unique]"]
    - ["system.string", "microsoft.powershell.commands.registerwmieventcommand", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.waiteventcommand", "Member[sourceidentifier]"]
    - ["system.string", "microsoft.powershell.commands.webresponseobject", "Member[rawcontent]"]
    - ["system.security.cryptography.hashalgorithm", "microsoft.powershell.commands.hashcmdletbase", "Member[hasher]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.starttransactioncommand", "Member[independent]"]
    - ["system.string", "microsoft.powershell.commands.getpssessioncommand", "Member[configurationname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[ge]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[get]"]
    - ["system.string[]", "microsoft.powershell.commands.processbasecommand", "Member[suppliedcomputername]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[vse]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[ipv6]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[hardwaremalfunction]"]
    - ["system.management.automation.runspaces.runspace", "microsoft.powershell.commands.psbreakpointcommandbase", "Member[runspace]"]
    - ["system.string", "microsoft.powershell.commands.updatetypedatacommand", "Member[defaultdisplayproperty]"]
    - ["system.serviceprocess.servicecontroller[]", "microsoft.powershell.commands.serviceoperationbasecommand", "Member[inputobject]"]
    - ["system.uint32", "microsoft.powershell.commands.exportcountercommand", "Member[maxsize]"]
    - ["system.boolean", "microsoft.powershell.commands.pspropertyexpression", "Member[haswildcardcharacters]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[noemphasis]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.newpssessioncommand", "Member[session]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osbootdevice]"]
    - ["microsoft.powershell.commands.displayhinttype", "microsoft.powershell.commands.displayhinttype!", "Member[date]"]
    - ["system.string", "microsoft.powershell.commands.filehashinfo", "Member[hash]"]
    - ["system.string", "microsoft.powershell.commands.newpsdrivecommand", "Member[description]"]
    - ["system.string", "microsoft.powershell.commands.writedebugcommand", "Member[message]"]
    - ["system.management.automation.signature", "microsoft.powershell.commands.setauthenticodesignaturecommand", "Method[performaction].ReturnValue"]
    - ["system.serviceprocess.servicecontroller[]", "microsoft.powershell.commands.multipleservicecommandbase", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.disablepsbreakpointcommand", "Member[passthru]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxsessionsperremotenode]"]
    - ["system.string", "microsoft.powershell.commands.newitempropertycommand", "Member[propertytype]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[workstation]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectobjectcommand", "Member[caseinsensitive]"]
    - ["system.string", "microsoft.powershell.commands.psuseragent!", "Member[firefox]"]
    - ["microsoft.powershell.commands.osproductsuite[]", "microsoft.powershell.commands.computerinfo", "Member[osproductsuites]"]
    - ["system.string", "microsoft.powershell.commands.setauthenticodesignaturecommand", "Member[timestampserver]"]
    - ["system.string[]", "microsoft.powershell.commands.jobcmdletbase", "Member[command]"]
    - ["system.string", "microsoft.powershell.commands.setaclcommand", "Member[centralaccesspolicy]"]
    - ["system.int32", "microsoft.powershell.commands.debugrunspacecommand", "Member[id]"]
    - ["system.int16", "microsoft.powershell.commands.writeeventlogcommand", "Member[category]"]
    - ["system.object", "microsoft.powershell.commands.newitemcommand", "Member[value]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[basevirtualizationsupport]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getcentralaccesspolicyname].ReturnValue"]
    - ["system.boolean", "microsoft.powershell.commands.webrequestsession", "Member[usedefaultcredentials]"]
    - ["system.string", "microsoft.powershell.commands.converttohtmlcommand", "Member[charset]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[unknown]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.processor", "Member[datawidth]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxidletimeoutsec]"]
    - ["system.collections.generic.ienumerable<system.management.automation.completionresult>", "microsoft.powershell.commands.pseditionargumentcompleter", "Method[completeargument].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[companyname]"]
    - ["system.object[]", "microsoft.powershell.commands.objectbase", "Member[property]"]
    - ["system.string", "microsoft.powershell.commands.sendmailmessage", "Member[body]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[header4color]"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[categorytargettype]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getmembercommand", "Member[static]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsenterprise]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[requirelicenseacceptance]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outhostcommand", "Member[paging]"]
    - ["system.string[]", "microsoft.powershell.commands.getcommandcommand", "Member[parametername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[remotedebug]"]
    - ["system.management.puttype", "microsoft.powershell.commands.setwmiinstance", "Member[puttype]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getwmiobjectcommand", "Member[list]"]
    - ["system.string", "microsoft.powershell.commands.memberdefinition", "Member[definition]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[tandemnt]"]
    - ["system.int32", "microsoft.powershell.commands.addtypecompilererror", "Member[line]"]
    - ["system.guid[]", "microsoft.powershell.commands.jobcmdletbase", "Member[instanceid]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[activityprocessidletimeoutsec]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[slate]"]
    - ["system.object", "microsoft.powershell.commands.genericobjectmeasureinfo", "Member[maximum]"]
    - ["system.string[]", "microsoft.powershell.commands.measureobjectcommand", "Member[property]"]
    - ["system.string", "microsoft.powershell.commands.getcredentialcommand", "Member[title]"]
    - ["system.boolean", "microsoft.powershell.commands.modulecmdletbase", "Member[basedisablenamechecking]"]
    - ["system.int32", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[port]"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[categoryactivity]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newvariablecommand", "Member[passthru]"]
    - ["system.datetime", "microsoft.powershell.commands.importcountercommand", "Member[endtime]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[removeitemdynamicparameters].ReturnValue"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.tracecommandcommand", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitemcommand", "Member[include]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[companyname]"]
    - ["microsoft.powershell.commands.webauthenticationtype", "microsoft.powershell.commands.webauthenticationtype!", "Member[bearer]"]
    - ["microsoft.powershell.commands.dataexecutionpreventionsupportpolicy", "microsoft.powershell.commands.dataexecutionpreventionsupportpolicy!", "Member[alwayson]"]
    - ["system.string", "microsoft.powershell.commands.setservicecommand", "Member[status]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.addmembercommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet", "Method[resolveappname].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.setservicecommand", "Member[description]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.debugjobcommand", "Member[breakall]"]
    - ["microsoft.powershell.commands.wmistate", "microsoft.powershell.commands.wmistate!", "Member[notstarted]"]
    - ["system.int32", "microsoft.powershell.commands.webresponseobject", "Member[statuscode]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.addcomputercommand", "Member[localcredential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[enablenetworkaccess]"]
    - ["system.int32", "microsoft.powershell.commands.writeprogresscommand", "Member[sourceid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[qualifier]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[delete]"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[groupmanagedserviceaccount]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[idletimeoutsec]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitemcommand", "Member[path]"]
    - ["system.boolean", "microsoft.powershell.commands.psexecutioncmdlet", "Member[isliteralpath]"]
    - ["system.string", "microsoft.powershell.commands.importlocalizeddata", "Member[filename]"]
    - ["system.int64[]", "microsoft.powershell.commands.gethistorycommand", "Member[id]"]
    - ["system.string[]", "microsoft.powershell.commands.filesystemproviderremoveitemdynamicparameters", "Member[stream]"]
    - ["system.string", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[description]"]
    - ["system.management.automation.variableaccessmode", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[mode]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[decnt]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[scriptstoprocess]"]
    - ["system.management.automation.pssessiontypeoption", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[sessiontypeoption]"]
    - ["system.guid[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[instanceid]"]
    - ["system.string", "microsoft.powershell.commands.testmodulemanifestcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[type]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[computerinstanceidparameterset]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oslocale]"]
    - ["system.object", "microsoft.powershell.commands.functionprovider", "Method[newitemdynamicparameters].ReturnValue"]
    - ["system.nullable<system.int16>", "microsoft.powershell.commands.computerinfo", "Member[oscurrenttimezone]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getwineventcommand", "Member[oldest]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.htmlwebresponseobject", "Member[allelements]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestmethod!", "Member[default]"]
    - ["microsoft.powershell.commands.firmwaretype", "microsoft.powershell.commands.firmwaretype!", "Member[uefi]"]
    - ["microsoft.powershell.commands.webrequestmethod", "microsoft.powershell.commands.webrequestpscmdlet", "Member[method]"]
    - ["system.string[]", "microsoft.powershell.commands.getwineventcommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.getaliascommand", "Member[exclude]"]
    - ["system.string", "microsoft.powershell.commands.htmlwebresponseobject", "Member[content]"]
    - ["system.string[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[resolvedcomputernames]"]
    - ["system.collections.hashtable[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[sshconnection]"]
    - ["system.string[]", "microsoft.powershell.commands.multipleservicecommandbase", "Member[exclude]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.renameitemcommand", "Member[force]"]
    - ["system.int64", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxpersistencestoresizegb]"]
    - ["microsoft.powershell.commands.outtarget", "microsoft.powershell.commands.outtarget!", "Member[job]"]
    - ["system.string[]", "microsoft.powershell.commands.getprocesscommand", "Member[computername]"]
    - ["system.security.accesscontrol.objectsecurity", "microsoft.powershell.commands.registryprovider", "Method[newsecuritydescriptorfrompath].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopjobcommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[list]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[formathexpathprefix]"]
    - ["system.string", "microsoft.powershell.commands.formobject", "Member[id]"]
    - ["system.object[]", "microsoft.powershell.commands.importmodulecommand", "Member[argumentlist]"]
    - ["system.management.impersonationlevel", "microsoft.powershell.commands.wmibasecmdlet", "Member[impersonation]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxsessions]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[vxworks]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powersavestandby]"]
    - ["system.int32", "microsoft.powershell.commands.waitprocesscommand", "Member[timeout]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[installinvoke]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[getcontentreaderdynamicparameters].ReturnValue"]
    - ["microsoft.powershell.commands.deviceguardsoftwaresecure", "microsoft.powershell.commands.deviceguardsoftwaresecure!", "Member[hypervisorenforcedcodeintegrity]"]
    - ["system.int64", "microsoft.powershell.commands.getdatecommand", "Member[unixtimeseconds]"]
    - ["system.management.automation.psmoduleinfo[]", "microsoft.powershell.commands.savehelpcommand", "Member[module]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.certificateprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxprocessespersession]"]
    - ["system.collections.hashtable[]", "microsoft.powershell.commands.importworkflowcommand!", "Method[mergeparametercollection].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getmodulecommand", "Member[refresh]"]
    - ["system.int32", "microsoft.powershell.commands.setpsdebugcommand", "Member[trace]"]
    - ["system.string", "microsoft.powershell.commands.importaliascommand", "Member[path]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csautomaticresetcapability]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.testcomputersecurechannelcommand", "Member[server]"]
    - ["system.string", "microsoft.powershell.commands.wmibasecmdlet", "Member[locale]"]
    - ["system.string", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[applicationname]"]
    - ["system.string[]", "microsoft.powershell.commands.disablecomputerrestorecommand", "Member[drive]"]
    - ["system.string[]", "microsoft.powershell.commands.removepsdrivecommand", "Member[name]"]
    - ["microsoft.powershell.commands.waitforservicetypes", "microsoft.powershell.commands.restartcomputercommand", "Member[for]"]
    - ["system.string[]", "microsoft.powershell.commands.setclipboardcommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.showcontrolpanelitemcommand", "Member[canonicalname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[noservicerestart]"]
    - ["system.string", "microsoft.powershell.commands.filesystemcontentdynamicparametersbase", "Member[stream]"]
    - ["system.string[]", "microsoft.powershell.commands.getwmiobjectcommand", "Member[property]"]
    - ["system.string", "microsoft.powershell.commands.testjsoncommand", "Member[schemafile]"]
    - ["microsoft.powershell.commands.historyinfo", "microsoft.powershell.commands.historyinfo", "Method[clone].ReturnValue"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.restartcomputercommand", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.sendmailmessage", "Member[from]"]
    - ["system.string", "microsoft.powershell.commands.removewmiobject", "Member[path]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[ostotalvirtualmemorysize]"]
    - ["system.xml.xmldocument", "microsoft.powershell.commands.getwineventcommand", "Member[filterxml]"]
    - ["microsoft.powershell.commands.cpustatus", "microsoft.powershell.commands.cpustatus!", "Member[disabledbybios]"]
    - ["system.object", "microsoft.powershell.commands.writeinformationcommand", "Member[messagedata]"]
    - ["system.string", "microsoft.powershell.commands.testjsoncommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.limiteventlogcommand", "Member[logname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[skipcncheck]"]
    - ["system.boolean", "microsoft.powershell.commands.enhancedkeyusagerepresentation", "Method[equals].ReturnValue"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.psexecutioncmdlet", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.importcsvcommand", "Member[header]"]
    - ["system.string", "microsoft.powershell.commands.getpssessioncommand", "Member[certificatethumbprint]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[rootmodule]"]
    - ["microsoft.powershell.executionpolicy", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[executionpolicy]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importpssessioncommand", "Member[disablenamechecking]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestsession", "Member[maximumretrycount]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportpssessioncommand", "Member[force]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.updatablehelpcommandbase", "Member[credential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importmodulecommand", "Member[noclobber]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[runasadministrator]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[paused]"]
    - ["system.string[]", "microsoft.powershell.commands.getservicecommand", "Member[computername]"]
    - ["system.string[]", "microsoft.powershell.commands.getcommandcommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.neweventlogcommand", "Member[messageresourcefile]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[in]"]
    - ["system.boolean", "microsoft.powershell.commands.registryprovider", "Method[itemexists].ReturnValue"]
    - ["microsoft.powershell.commands.displayhinttype", "microsoft.powershell.commands.setdatecommand", "Member[displayhint]"]
    - ["system.string", "microsoft.powershell.commands.psrunspacecmdlet!", "Member[nameparameterset]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[powerswitch]"]
    - ["system.management.automation.job[]", "microsoft.powershell.commands.removejobcommand", "Member[job]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.newobjectcommand", "Member[property]"]
    - ["system.string[]", "microsoft.powershell.commands.getcontrolpanelitemcommand", "Member[canonicalname]"]
    - ["system.string", "microsoft.powershell.commands.setlocationcommand", "Member[stackname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getpssessioncommand", "Member[allowredirection]"]
    - ["system.string[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[containerid]"]
    - ["system.collections.objectmodel.collection<system.management.automation.pssnapininfo>", "microsoft.powershell.commands.pssnapincommandbase", "Method[getsnapins].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.starttranscriptcommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsdrivecommand", "Member[psprovider]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[notmatch]"]
    - ["system.string[]", "microsoft.powershell.commands.converttohtmlcommand", "Member[postcontent]"]
    - ["system.security.securestring", "microsoft.powershell.commands.webrequestpscmdlet", "Member[token]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[biossystembiosminorversion]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxidletimeoutsec]"]
    - ["system.int32", "microsoft.powershell.commands.restorecomputercommand", "Member[restorepoint]"]
    - ["system.collections.generic.dictionary<system.guid,system.management.automation.runspaces.pssession>", "microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspacesbyrunspaceid].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.compareobjectcommand", "Member[excludedifferent]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[sunos]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[eq]"]
    - ["system.string", "microsoft.powershell.commands.networkadapter", "Member[dhcpserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.clearvariablecommand", "Member[force]"]
    - ["microsoft.powershell.commands.serverlevel", "microsoft.powershell.commands.serverlevel!", "Member[fullserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testconnectioncommand", "Member[dontfragment]"]
    - ["system.object", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[targetobject]"]
    - ["system.string[]", "microsoft.powershell.commands.invokecommandcommand", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.exportpssessioncommand", "Member[outputmodule]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.connectpssessioncommand", "Member[authentication]"]
    - ["system.string", "microsoft.powershell.commands.importmodulecommand", "Member[cimnamespace]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[literalfilepathcomputernameparameterset]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.restartcomputercommand", "Member[asjob]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setvariablecommand", "Member[force]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[unknown]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.newwebserviceproxy", "Member[credential]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.writealiascommandbase", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.outfilecommand", "Member[filepath]"]
    - ["system.string", "microsoft.powershell.commands.modulespecification", "Member[maximumversion]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommandbase", "Member[assemblyname]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[utf8]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[performanceserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.geteventlogcommand", "Member[list]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.addtypecommand", "Member[language]"]
    - ["system.management.automation.psprimitivedictionary", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[applicationarguments]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[enterpriseedition]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsbuildlabex]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.webcmdletelementcollection", "Method[findbyid].ReturnValue"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[hardwaredisabled]"]
    - ["system.int32", "microsoft.powershell.commands.removeeventcommand", "Member[eventidentifier]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommand", "Member[namespace]"]
    - ["system.nullable<microsoft.powershell.commands.cpuarchitecture>", "microsoft.powershell.commands.processor", "Member[architecture]"]
    - ["system.string[]", "microsoft.powershell.commands.exportmodulemembercommand", "Member[cmdlet]"]
    - ["system.text.encoding", "microsoft.powershell.commands.sendmailmessage", "Member[encoding]"]
    - ["system.string[]", "microsoft.powershell.commands.gettypedatacommand", "Member[typename]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure", "microsoft.powershell.commands.deviceguardhardwaresecure!", "Member[securememoryoverwrite]"]
    - ["system.nullable<system.int16>", "microsoft.powershell.commands.computerinfo", "Member[biosembeddedcontrollerminorversion]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[notintalled]"]
    - ["system.string", "microsoft.powershell.commands.importworkflowcommand!", "Member[parametererrormessage]"]
    - ["system.nullable<microsoft.powershell.commands.hardwaresecurity>", "microsoft.powershell.commands.computerinfo", "Member[cskeyboardpasswordstatus]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importcountercommand", "Member[summary]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathsshhostparameterset]"]
    - ["system.object[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[modulestoimport]"]
    - ["system.string[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[vmname]"]
    - ["system.datetime", "microsoft.powershell.commands.geteventlogcommand", "Member[after]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsregisteredorganization]"]
    - ["system.nullable<microsoft.powershell.commands.firmwaretype>", "microsoft.powershell.commands.computerinfo", "Member[biosfirmwaretype]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.groupobjectcommand", "Member[asstring]"]
    - ["system.serviceprocess.servicecontroller", "microsoft.powershell.commands.removeservicecommand", "Member[inputobject]"]
    - ["system.security.accesscontrol.commonsecuritydescriptor", "microsoft.powershell.commands.securitydescriptorinfo", "Member[rawdescriptor]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[hypervisorpresent]"]
    - ["system.string[]", "microsoft.powershell.commands.stopprocesscommand", "Member[name]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[modemring]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestsession", "Member[retryintervalinseconds]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[keyfilepath]"]
    - ["system.string[]", "microsoft.powershell.commands.matchinfocontext", "Member[displaypostcontext]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outfilecommand", "Member[noclobber]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[mobile]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablepssessionconfigurationcommand", "Member[skipnetworkprofilecheck]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startjobcommand", "Member[runasadministrator]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[bioslistoflanguages]"]
    - ["system.string", "microsoft.powershell.commands.writealiascommandbase", "Member[description]"]
    - ["system.string[]", "microsoft.powershell.commands.importcountercommand", "Member[listset]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[csphyicallyinstalledmemory]"]
    - ["system.string", "microsoft.powershell.commands.startprocesscommand", "Member[redirectstandarderror]"]
    - ["system.string[]", "microsoft.powershell.commands.restartcomputercommand", "Member[computername]"]
    - ["system.int32[]", "microsoft.powershell.commands.getrunspacecommand", "Member[id]"]
    - ["system.string", "microsoft.powershell.commands.renameitemcommand", "Member[newname]"]
    - ["system.string", "microsoft.powershell.commands.addtypecompilererror", "Member[errortext]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[osinstalldate]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[requiredassemblies]"]
    - ["system.management.automation.psobject[]", "microsoft.powershell.commands.neweventcommand", "Member[eventarguments]"]
    - ["system.string[]", "microsoft.powershell.commands.limiteventlogcommand", "Member[computername]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.webcmdletelementcollection", "Method[findbyname].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.webrequestpscmdlet", "Member[connectiontimeoutseconds]"]
    - ["microsoft.powershell.commands.adminpasswordstatus", "microsoft.powershell.commands.adminpasswordstatus!", "Member[notimplemented]"]
    - ["system.management.automation.job[]", "microsoft.powershell.commands.suspendjobcommand", "Member[job]"]
    - ["system.string", "microsoft.powershell.commands.networkadapter", "Member[connectionid]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[connecting]"]
    - ["system.exception", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[exception]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[ignorewhitespace]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[cstotalphysicalmemory]"]
    - ["system.string", "microsoft.powershell.commands.renamecomputercommand", "Member[computername]"]
    - ["system.diagnostics.process[]", "microsoft.powershell.commands.getprocesscommand", "Member[inputobject]"]
    - ["system.net.sockets.unixdomainsocketendpoint", "microsoft.powershell.commands.webrequestpscmdlet", "Member[unixsocket]"]
    - ["system.int32", "microsoft.powershell.commands.convertfromjsoncommand", "Member[depth]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorinfo", "Member[owner]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[performanceserver]"]
    - ["system.object[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[visiblefunctions]"]
    - ["system.management.automation.scopeditemoptions", "microsoft.powershell.commands.writealiascommandbase", "Member[option]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[poweroff]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[applicationbase]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.compareobjectcommand", "Member[passthru]"]
    - ["system.string[]", "microsoft.powershell.commands.corecommandbase", "Member[exclude]"]
    - ["system.string", "microsoft.powershell.commands.setlocationcommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[unsecuredjoin]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[skiphttperrorcheck]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxdisconnectedsessions]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.processor", "Member[addresswidth]"]
    - ["system.string", "microsoft.powershell.commands.removeitemcommand", "Member[filter]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[homebasicnedition]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[assemblyname]"]
    - ["system.string[]", "microsoft.powershell.commands.setitemcommand", "Member[exclude]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csprimaryownername]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[powersaveunknown]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportcountercommand", "Member[circular]"]
    - ["system.string", "microsoft.powershell.commands.computerchangeinfo", "Member[computername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.sortobjectcommand", "Member[descending]"]
    - ["system.string", "microsoft.powershell.commands.newobjectcommand", "Member[comobject]"]
    - ["system.management.automation.cmsmessagerecipient[]", "microsoft.powershell.commands.protectcmsmessagecommand", "Member[to]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[mountuserdrive]"]
    - ["system.object[]", "microsoft.powershell.commands.compareobjectcommand", "Member[property]"]
    - ["system.object", "microsoft.powershell.commands.converttojsoncommand", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablepsremotingcommand", "Member[skipnetworkprofilecheck]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[idletimeout]"]
    - ["system.int64", "microsoft.powershell.commands.getcontentcommand", "Member[totalcount]"]
    - ["system.int32", "microsoft.powershell.commands.gethistorycommand", "Member[count]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[word]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemcontentreaderdynamicparameters", "Member[delimiterspecified]"]
    - ["system.string[]", "microsoft.powershell.commands.getcomputerinfocommand", "Member[property]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[smallbusinessserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[maximum]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[not]"]
    - ["system.string", "microsoft.powershell.commands.psrunspacecmdlet!", "Member[instanceidparameterset]"]
    - ["system.string", "microsoft.powershell.commands.geteventpssnapin", "Member[vendorresource]"]
    - ["system.string[]", "microsoft.powershell.commands.resumejobcommand", "Member[command]"]
    - ["system.string[]", "microsoft.powershell.commands.moveitemcommand", "Member[exclude]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.showmarkdowncommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[notconfigured]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.passthroughcontentcommandbase", "Member[passthru]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osdataexecutionpreventionavailable]"]
    - ["system.string", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[author]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[filereaderror]"]
    - ["microsoft.powershell.commands.hardwaresecurity", "microsoft.powershell.commands.hardwaresecurity!", "Member[enabled]"]
    - ["system.string[]", "microsoft.powershell.commands.showcontrolpanelitemcommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.removeeventlogcommand", "Member[computername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.resolvepathcommand", "Member[relative]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxconcurrentusers]"]
    - ["system.string", "microsoft.powershell.commands.addmembercommand", "Member[typename]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.variableprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[win9xupgrade]"]
    - ["system.string[]", "microsoft.powershell.commands.getverbcommand", "Member[verb]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[renamepropertydynamicparameters].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.importlocalizeddata", "Member[supportedcommand]"]
    - ["system.version", "microsoft.powershell.commands.webrequestpscmdlet", "Member[httpversion]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.connectpssessioncommand", "Member[usessl]"]
    - ["system.string", "microsoft.powershell.commands.outfilecommand", "Member[encoding]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[appliancepc]"]
    - ["microsoft.powershell.commands.wakeuptype", "microsoft.powershell.commands.wakeuptype!", "Member[acpowerrestored]"]
    - ["system.string", "microsoft.powershell.commands.importlocalizeddata", "Member[bindingvariable]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.computerinfo", "Member[osnumberofprocesses]"]
    - ["system.nullable<microsoft.powershell.commands.bootoptionaction>", "microsoft.powershell.commands.computerinfo", "Member[csbootoptiononlimit]"]
    - ["system.string[]", "microsoft.powershell.commands.testconnectioncommand", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.variablecommandbase", "Member[scope]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.testconnectioncommand", "Member[credential]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.setservicecommand", "Member[credential]"]
    - ["system.collections.ilist", "microsoft.powershell.commands.sessionstateproviderbasecontentreaderwriter", "Method[read].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.gethelpcommand", "Member[full]"]
    - ["microsoft.powershell.commands.openmode", "microsoft.powershell.commands.openmode!", "Member[overwrite]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[copypropertydynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.settracesourcecommand", "Member[passthru]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[bigendianutf32]"]
    - ["system.string[]", "microsoft.powershell.commands.getservicecommand", "Member[name]"]
    - ["microsoft.powershell.commands.servicestartuptype", "microsoft.powershell.commands.servicestartuptype!", "Member[disabled]"]
    - ["system.uint32", "microsoft.powershell.commands.getcommandcommand", "Member[fuzzyminimumdistance]"]
    - ["system.string", "microsoft.powershell.commands.renamecomputercommand", "Member[protocol]"]
    - ["system.management.automation.psmoduleinfo[]", "microsoft.powershell.commands.removemodulecommand", "Member[moduleinfo]"]
    - ["system.string", "microsoft.powershell.commands.psuseragent!", "Member[chrome]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[usessl]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.suspendjobcommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.geteventlogcommand", "Member[username]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcommandcommand", "Member[useabbreviationexpansion]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.htmlwebresponseobject", "Member[scripts]"]
    - ["system.nullable<microsoft.powershell.commands.osencryptionlevel>", "microsoft.powershell.commands.computerinfo", "Member[osencryptionlevel]"]
    - ["microsoft.powershell.commands.foregroundapplicationboost", "microsoft.powershell.commands.foregroundapplicationboost!", "Member[maximum]"]
    - ["system.string[]", "microsoft.powershell.commands.updatehelpcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.pushlocationcommand", "Member[stackname]"]
    - ["microsoft.powershell.commands.bootoptionaction", "microsoft.powershell.commands.bootoptionaction!", "Member[donotreboot]"]
    - ["system.int32", "microsoft.powershell.commands.newtimespancommand", "Member[minutes]"]
    - ["system.int32", "microsoft.powershell.commands.receivepssessioncommand", "Member[port]"]
    - ["system.string[]", "microsoft.powershell.commands.clearvariablecommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[character]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathvmnameparameterset]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[formatstoprocess]"]
    - ["system.string", "microsoft.powershell.commands.moveitemcommand", "Member[destination]"]
    - ["system.management.automation.runspaces.authenticationmechanism", "microsoft.powershell.commands.invokecommandcommand", "Member[authentication]"]
    - ["system.object[]", "microsoft.powershell.commands.selectobjectcommand", "Member[property]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericmeasureinfo", "Member[average]"]
    - ["system.object", "microsoft.powershell.commands.corecommandbase", "Method[getdynamicparameters].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.neweventlogcommand", "Member[parameterresourcefile]"]
    - ["system.uri", "microsoft.powershell.commands.getmodulecommand", "Member[cimresourceuri]"]
    - ["system.string", "microsoft.powershell.commands.testjsoncommand", "Member[path]"]
    - ["system.object", "microsoft.powershell.commands.genericobjectmeasureinfo", "Member[minimum]"]
    - ["system.nullable<microsoft.powershell.commands.systemelementstate>", "microsoft.powershell.commands.computerinfo", "Member[csthermalstate]"]
    - ["system.int32", "microsoft.powershell.commands.objecteventregistrationbase", "Member[maxtriggercount]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[hypervrequirementvmmonitormodeextensions]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[allstats]"]
    - ["system.string", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[copyright]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importaliascommand", "Member[passthru]"]
    - ["system.object[]", "microsoft.powershell.commands.tracecommandcommand", "Member[argumentlist]"]
    - ["system.boolean", "microsoft.powershell.commands.newitemcommand", "Member[providersupportsshouldprocess]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.savehelpcommand", "Member[fullyqualifiedmodule]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addtypecommandbase", "Member[ignorewarnings]"]
    - ["system.string[]", "microsoft.powershell.commands.removevariablecommand", "Member[name]"]
    - ["system.management.automation.remoting.pssessionoption", "microsoft.powershell.commands.getpssessioncommand", "Member[sessionoption]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.importworkflowcommand", "Member[force]"]
    - ["microsoft.powershell.commands.outputmodeoption", "microsoft.powershell.commands.outputmodeoption!", "Member[multiple]"]
    - ["microsoft.powershell.commands.dataexecutionpreventionsupportpolicy", "microsoft.powershell.commands.dataexecutionpreventionsupportpolicy!", "Member[alwaysoff]"]
    - ["microsoft.powershell.commands.bootoptionaction", "microsoft.powershell.commands.bootoptionaction!", "Member[systemutilities]"]
    - ["system.string[]", "microsoft.powershell.commands.addpssnapincommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getprocesscommand", "Member[module]"]
    - ["microsoft.powershell.commands.deviceguardhardwaresecure[]", "microsoft.powershell.commands.computerinfo", "Member[deviceguardrequiredsecurityproperties]"]
    - ["system.management.managementobject", "microsoft.powershell.commands.invokewmimethod", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oswindowsdirectory]"]
    - ["system.string", "microsoft.powershell.commands.getaliascommand", "Member[scope]"]
    - ["system.int32", "microsoft.powershell.commands.waitjobcommand", "Member[timeout]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[notcontains]"]
    - ["microsoft.powershell.commands.softwareelementstate", "microsoft.powershell.commands.softwareelementstate!", "Member[executable]"]
    - ["system.version", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[schemaversion]"]
    - ["system.diagnostics.traceoptions", "microsoft.powershell.commands.settracesourcecommand", "Member[listeneroption]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.psexecutioncmdlet", "Method[getscriptblockfromfile].ReturnValue"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[environmentvariables]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosothertargetos]"]
    - ["system.string", "microsoft.powershell.commands.restartcomputercommand", "Member[protocol]"]
    - ["microsoft.powershell.commands.serverlevel", "microsoft.powershell.commands.serverlevel!", "Member[servercorewithmanagementtools]"]
    - ["system.string", "microsoft.powershell.commands.filehashinfo", "Member[algorithm]"]
    - ["system.string", "microsoft.powershell.commands.geteventlogcommand", "Member[message]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopcomputercommand", "Member[asjob]"]
    - ["microsoft.powershell.commands.cpustatus", "microsoft.powershell.commands.cpustatus!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[certificatethumbprint]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttojsoncommand", "Member[enumsasstrings]"]
    - ["system.guid", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[guid]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.basichtmlwebresponseobject", "Member[links]"]
    - ["system.string[]", "microsoft.powershell.commands.jobcmdletbase", "Member[name]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[winnt]"]
    - ["system.string[]", "microsoft.powershell.commands.getitempropertyvaluecommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.clearhistorycommand", "Member[commandline]"]
    - ["system.string[]", "microsoft.powershell.commands.setservicecommand", "Member[computername]"]
    - ["system.string[]", "microsoft.powershell.commands.removetypedatacommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.bytecollection", "Member[hexbytes]"]
    - ["system.nullable<microsoft.powershell.commands.softwareelementstate>", "microsoft.powershell.commands.computerinfo", "Member[biossoftwareelementstate]"]
    - ["system.string", "microsoft.powershell.commands.variableprovider!", "Member[providername]"]
    - ["system.object", "microsoft.powershell.commands.matchinfocontext", "Method[clone].ReturnValue"]
    - ["system.management.automation.job[]", "microsoft.powershell.commands.waitjobcommand", "Member[job]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getchilditemcommand", "Member[force]"]
    - ["system.object", "microsoft.powershell.commands.newvariablecommand", "Member[value]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addcomputercommand", "Member[passthru]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.receivejobcommand", "Member[filter]"]
    - ["microsoft.powershell.commands.breakpointtype[]", "microsoft.powershell.commands.getpsbreakpointcommand", "Member[type]"]
    - ["system.string", "microsoft.powershell.commands.servicecommandexception", "Member[servicename]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[utf32]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[maximumredirection]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[defaultcommandprefix]"]
    - ["microsoft.powershell.commands.outputassemblytype", "microsoft.powershell.commands.outputassemblytype!", "Member[windowsapplication]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.measureobjectcommand", "Member[minimum]"]
    - ["system.object", "microsoft.powershell.commands.corecommandbase", "Member[retrieveddynamicparameters]"]
    - ["system.string", "microsoft.powershell.commands.aliasprovider!", "Member[providername]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.getmembercommand", "Member[inputobject]"]
    - ["system.string[]", "microsoft.powershell.commands.debugprocesscommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.settracesourcecommand", "Member[debugger]"]
    - ["system.management.automation.runspaces.pssessionconfigurationaccessmode", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[accessmode]"]
    - ["system.string", "microsoft.powershell.commands.renamecomputercommand", "Member[newname]"]
    - ["system.collections.generic.ireadonlylist<system.management.automation.runspaces.runspace>", "microsoft.powershell.commands.commonrunspacecommandbase", "Method[getrunspaces].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.gethelpcommand", "Member[functionality]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.selectxmlcommand", "Member[namespace]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[alpha]"]
    - ["system.string[]", "microsoft.powershell.commands.setvariablecommand", "Member[exclude]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.removemodulecommand", "Member[fullyqualifiedname]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[externalmoduledependencies]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[reliantunix]"]
    - ["system.boolean", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[enablevalidation]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.gettimezonecommand", "Member[listavailable]"]
    - ["system.string", "microsoft.powershell.commands.invokeexpressioncommand", "Member[command]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitemcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.checkpointcomputercommand", "Member[description]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[prerelease]"]
    - ["system.string", "microsoft.powershell.commands.outfilecommand", "Member[literalpath]"]
    - ["system.security.cryptography.x509certificates.x509certificate", "microsoft.powershell.commands.webrequestpscmdlet", "Member[certificate]"]
    - ["system.collections.objectmodel.collection<system.management.automation.psdriveinfo>", "microsoft.powershell.commands.functionprovider", "Method[initializedefaultdrives].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.filehashinfo", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.unblockfilecommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.renamecomputerchangeinfo", "Member[newcomputername]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[biossmbiosminorversion]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcmdletproviderencoding!", "Member[string]"]
    - ["system.string[]", "microsoft.powershell.commands.setitemcommand", "Member[literalpath]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.psexecutioncmdlet", "Member[scriptblock]"]
    - ["system.string[]", "microsoft.powershell.commands.setvariablecommand", "Member[include]"]
    - ["mshtml.ihtmldocument2", "microsoft.powershell.commands.htmlwebresponseobject", "Member[parsedhtml]"]
    - ["system.object[]", "microsoft.powershell.commands.getrandomcommandbase", "Member[inputobject]"]
    - ["microsoft.powershell.commands.processor[]", "microsoft.powershell.commands.computerinfo", "Member[csprocessors]"]
    - ["system.string", "microsoft.powershell.commands.addcomputercommand", "Member[domainname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[passthru]"]
    - ["system.management.automation.remoting.pssessionoption", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[sessionoption]"]
    - ["microsoft.powershell.commands.adminpasswordstatus", "microsoft.powershell.commands.adminpasswordstatus!", "Member[disabled]"]
    - ["system.char", "microsoft.powershell.commands.basecsvwritingcommand", "Member[delimiter]"]
    - ["system.string[]", "microsoft.powershell.commands.securitydescriptorinfo", "Member[systemacl]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.restartcomputercommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.getvariablecommand", "Member[exclude]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[hypervrequirementvirtualizationfirmwareenabled]"]
    - ["system.string", "microsoft.powershell.commands.registryprovider!", "Member[providername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.enablepsremotingcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.moveitemcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.psexecutioncmdlet", "Member[enablenetworkaccess]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[sshhosthashparameterset]"]
    - ["system.object[]", "microsoft.powershell.commands.foreachobjectcommand", "Member[argumentlist]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[cspowermanagementsupported]"]
    - ["system.guid[]", "microsoft.powershell.commands.psexecutioncmdlet", "Member[vmid]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.startprocesscommand", "Member[credential]"]
    - ["system.management.automation.errorrecord", "microsoft.powershell.commands.helpcategoryinvalidexception", "Member[errorrecord]"]
    - ["system.string", "microsoft.powershell.commands.dnsnamerepresentation", "Method[tostring].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.passthroughitempropertycommandbase", "Member[force]"]
    - ["system.management.automation.configuration.configscope", "microsoft.powershell.commands.enabledisableexperimentalfeaturecommandbase", "Member[scope]"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[session]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[noencryption]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getpath].ReturnValue"]
    - ["microsoft.powershell.commands.producttype", "microsoft.powershell.commands.producttype!", "Member[domaincontroller]"]
    - ["system.string", "microsoft.powershell.commands.exportcountercommand", "Member[path]"]
    - ["system.int32", "microsoft.powershell.commands.genericmeasureinfo", "Member[count]"]
    - ["system.string", "microsoft.powershell.commands.exportaliascommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.setvariablecommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.matchinfo", "Member[line]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[ostotalvisiblememorysize]"]
    - ["system.int32", "microsoft.powershell.commands.updatetypedatacommand", "Member[serializationdepth]"]
    - ["system.string[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[vmnameparameterset]"]
    - ["microsoft.powershell.commands.filesystemcmdletproviderencoding", "microsoft.powershell.commands.filesystemcontentdynamicparametersbase", "Member[encoding]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getexecutionpolicycommand", "Member[list]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.convertfrommarkdowncommand", "Member[inputobject]"]
    - ["system.int32", "microsoft.powershell.commands.geterrorcommand", "Member[newest]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[visibleproviders]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.registerwmieventcommand", "Member[query]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[socketdesignation]"]
    - ["system.boolean", "microsoft.powershell.commands.getjobcommand", "Member[hasmoredata]"]
    - ["system.int32", "microsoft.powershell.commands.testconnectioncommand", "Member[count]"]
    - ["system.string[]", "microsoft.powershell.commands.updatedata", "Member[prependpath]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[logonserver]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.networkadapter", "Member[dhcpenabled]"]
    - ["system.object[]", "microsoft.powershell.commands.startjobcommand", "Member[argumentlist]"]
    - ["system.string", "microsoft.powershell.commands.testpathcommand", "Member[filter]"]
    - ["system.string", "microsoft.powershell.commands.bytecollection", "Member[ascii]"]
    - ["system.string", "microsoft.powershell.commands.convertfromsddlstringcommand", "Member[sddl]"]
    - ["system.datetime", "microsoft.powershell.commands.getjobcommand", "Member[after]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[passwordpass]"]
    - ["system.nullable<microsoft.powershell.commands.systemelementstate>", "microsoft.powershell.commands.computerinfo", "Member[cspowersupplystate]"]
    - ["system.string[]", "microsoft.powershell.commands.copyitemcommand", "Member[include]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[standardserveredition]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities[]", "microsoft.powershell.commands.computerinfo", "Member[cspowermanagementcapabilities]"]
    - ["system.boolean", "microsoft.powershell.commands.servicebasecommand", "Method[shouldprocessserviceoperation].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.multipleservicecommandbase", "Member[include]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.writeprogresscommand", "Member[completed]"]
    - ["microsoft.powershell.commands.osproductsuite", "microsoft.powershell.commands.osproductsuite!", "Member[backofficecomponents]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getpssessioncommand", "Member[usessl]"]
    - ["system.string", "microsoft.powershell.commands.startprocesscommand", "Member[verb]"]
    - ["microsoft.powershell.commands.resetcapability", "microsoft.powershell.commands.resetcapability!", "Member[enabled]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[gnuhurd]"]
    - ["microsoft.powershell.commands.deviceguardsmartstatus", "microsoft.powershell.commands.deviceguardsmartstatus!", "Member[off]"]
    - ["system.string", "microsoft.powershell.commands.newpsdrivecommand", "Member[psprovider]"]
    - ["system.string", "microsoft.powershell.commands.wmibasecmdlet", "Member[namespace]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[usessl]"]
    - ["system.object", "microsoft.powershell.commands.writehostcommand", "Member[separator]"]
    - ["system.string", "microsoft.powershell.commands.bytecollection", "Method[tostring].ReturnValue"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[quiesced]"]
    - ["microsoft.powershell.commands.systemelementstate", "microsoft.powershell.commands.systemelementstate!", "Member[unknown]"]
    - ["system.object[]", "microsoft.powershell.commands.newobjectcommand", "Member[argumentlist]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[boldforegroundcolor]"]
    - ["system.nullable<microsoft.powershell.commands.deviceguardconfigcodeintegritystatus>", "microsoft.powershell.commands.deviceguard", "Member[usermodecodeintegritypolicyenforcementstatus]"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[bigendianunicode]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[runasvirtualaccount]"]
    - ["system.collections.generic.dictionary<system.guid,system.management.automation.runspaces.pssession>", "microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspacesbyname].ReturnValue"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[sohoserver]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.outgridviewcommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.formobject", "Member[method]"]
    - ["microsoft.powershell.commands.osencryptionlevel", "microsoft.powershell.commands.osencryptionlevel!", "Member[encrypt128bits]"]
    - ["system.string[]", "microsoft.powershell.commands.clearitemcommand", "Member[include]"]
    - ["system.string[]", "microsoft.powershell.commands.settracesourcecommand", "Member[removefilelistener]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[manufacturer]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powersavesoftoff]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportformatdatacommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.updatetypedatacommand", "Member[defaultkeypropertyset]"]
    - ["microsoft.powershell.commands.webauthenticationtype", "microsoft.powershell.commands.webauthenticationtype!", "Member[oauth]"]
    - ["system.string[]", "microsoft.powershell.commands.importmodulecommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.newservicecommand", "Member[binarypathname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcommandcommand", "Member[syntax]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.newpstransportoptioncommand", "Member[maxconcurrentcommandspersession]"]
    - ["system.collections.generic.ienumerable<system.string>", "microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[gettarget].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getaclcommand", "Member[allcentralaccesspolicies]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[ne]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.computerinfo", "Member[osmaxnumberofprocesses]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getpssessioncapabilitycommand", "Member[full]"]
    - ["system.string", "microsoft.powershell.commands.importmodulecommand", "Member[prefix]"]
    - ["microsoft.powershell.commands.webcmdletelementcollection", "microsoft.powershell.commands.basichtmlwebresponseobject", "Member[images]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[installerror]"]
    - ["system.globalization.cultureinfo[]", "microsoft.powershell.commands.updatablehelpcommandbase", "Member[uiculture]"]
    - ["system.int32", "microsoft.powershell.commands.connectpssessioncommand", "Member[port]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osversion]"]
    - ["system.string[]", "microsoft.powershell.commands.convertpathcommand", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcommandcommand", "Member[usefuzzymatching]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[definitionpath]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemcontentdynamicparametersbase", "Member[wasstreamtypespecified]"]
    - ["system.string", "microsoft.powershell.commands.converttoxmlcommand", "Member[as]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[allmatches]"]
    - ["system.string[]", "microsoft.powershell.commands.setaclcommand", "Member[literalpath]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxsessionsperuser]"]
    - ["system.version", "microsoft.powershell.commands.importmodulecommand", "Member[requiredversion]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[visiblealiases]"]
    - ["microsoft.powershell.commands.networkadapter[]", "microsoft.powershell.commands.computerinfo", "Member[csnetworkadapters]"]
    - ["microsoft.powershell.commands.cpuarchitecture", "microsoft.powershell.commands.cpuarchitecture!", "Member[powerpc]"]
    - ["system.guid", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[guid]"]
    - ["system.management.automation.runspaces.typedata[]", "microsoft.powershell.commands.updatetypedatacommand", "Member[typedata]"]
    - ["system.string", "microsoft.powershell.commands.writeeventlogcommand", "Member[computername]"]
    - ["microsoft.powershell.commands.deviceguardsoftwaresecure[]", "microsoft.powershell.commands.computerinfo", "Member[deviceguardsecurityservicesrunning]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[cscaption]"]
    - ["system.nullable<microsoft.powershell.commands.deviceguardconfigcodeintegritystatus>", "microsoft.powershell.commands.computerinfo", "Member[deviceguardcodeintegritypolicyenforcementstatus]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getuniquecommand", "Member[asstring]"]
    - ["system.string[]", "microsoft.powershell.commands.unblockfilecommand", "Member[path]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.webrequestpscmdlet", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[keyboardlayout]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[compatiblepseditions]"]
    - ["system.nullable<microsoft.powershell.commands.deviceguardconfigcodeintegritystatus>", "microsoft.powershell.commands.computerinfo", "Member[deviceguardusermodecodeintegritypolicyenforcementstatus]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storagestandardserveredition]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[freebsd]"]
    - ["system.string", "microsoft.powershell.commands.exportcsvcommand", "Member[encoding]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[serverfoundation]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.getcredentialcommand", "Member[credential]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[datacenterserveredition]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet", "Member[filepath]"]
    - ["system.string", "microsoft.powershell.commands.invokewmimethod", "Member[class]"]
    - ["system.string[]", "microsoft.powershell.commands.sendmailmessage", "Member[attachments]"]
    - ["system.string[]", "microsoft.powershell.commands.getchilditemcommand", "Member[path]"]
    - ["system.string[]", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[command]"]
    - ["system.string[]", "microsoft.powershell.commands.itempropertycommandbase", "Member[include]"]
    - ["system.string[]", "microsoft.powershell.commands.sendmailmessage", "Member[replyto]"]
    - ["system.string[]", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[command]"]
    - ["system.datetime", "microsoft.powershell.commands.newtimespancommand", "Member[end]"]
    - ["system.string", "microsoft.powershell.commands.settimezonecommand", "Member[id]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestpscmdlet", "Member[operationtimeoutseconds]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.debugrunspacecommand", "Member[breakall]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startjobcommand", "Member[usessl]"]
    - ["system.string", "microsoft.powershell.commands.testconnectioncommand", "Member[protocol]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getwmiobjectcommand", "Member[recurse]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[workstation]"]
    - ["system.string[]", "microsoft.powershell.commands.getpshostprocessinfocommand", "Member[name]"]
    - ["microsoft.powershell.commands.language", "microsoft.powershell.commands.language!", "Member[visualbasic]"]
    - ["microsoft.powershell.commands.wmistate", "microsoft.powershell.commands.wmistate!", "Member[stopped]"]
    - ["microsoft.powershell.commands.wmistate", "microsoft.powershell.commands.wmistate!", "Member[completed]"]
    - ["system.object", "microsoft.powershell.commands.writehostcommand", "Member[object]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.renamecomputercommand", "Member[restart]"]
    - ["system.string[]", "microsoft.powershell.commands.clearitempropertycommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.itempropertycommandbase", "Member[exclude]"]
    - ["system.string", "microsoft.powershell.commands.stopcomputercommand", "Member[wsmanauthentication]"]
    - ["system.string[]", "microsoft.powershell.commands.getitempropertyvaluecommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.startjobcommand", "Member[containerid]"]
    - ["system.string", "microsoft.powershell.commands.addtypecompilererror", "Member[errornumber]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.convertfromjsoncommand", "Member[noenumerate]"]
    - ["system.int32[]", "microsoft.powershell.commands.clearhistorycommand", "Member[id]"]
    - ["system.string[]", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[script]"]
    - ["microsoft.powershell.commands.domainrole", "microsoft.powershell.commands.domainrole!", "Member[memberworkstation]"]
    - ["microsoft.powershell.commands.testpathtype", "microsoft.powershell.commands.testpathtype!", "Member[leaf]"]
    - ["system.collections.generic.list<system.management.automation.job>", "microsoft.powershell.commands.getjobcommand", "Method[findjobs].ReturnValue"]
    - ["microsoft.powershell.commands.textencodingtype", "microsoft.powershell.commands.textencodingtype!", "Member[ascii]"]
    - ["system.uri", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[projecturi]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setaclcommand", "Member[passthru]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[unspecified]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[quiet]"]
    - ["system.string[]", "microsoft.powershell.commands.startjobcommand", "Member[hostname]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[powershellhostname]"]
    - ["system.string[]", "microsoft.powershell.commands.importpowershelldatafilecommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.joinpathcommand", "Member[path]"]
    - ["microsoft.powershell.commands.cpustatus", "microsoft.powershell.commands.cpustatus!", "Member[other]"]
    - ["system.nullable<microsoft.powershell.commands.powerstate>", "microsoft.powershell.commands.computerinfo", "Member[cspowerstate]"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[categorytargetname]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.startjobcommand", "Member[inputobject]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.formatwidecommand", "Member[autosize]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[degraded]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpsdrivecommand", "Member[persist]"]
    - ["system.uint16[]", "microsoft.powershell.commands.computerinfo", "Member[bioscharacteristics]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.psremotingbasecmdlet", "Member[options]"]
    - ["system.string[]", "microsoft.powershell.commands.getlocationcommand", "Member[psprovider]"]
    - ["microsoft.powershell.commands.formobjectcollection", "microsoft.powershell.commands.htmlwebresponseobject", "Member[forms]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverhypercorev]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csinitialloadinfo]"]
    - ["microsoft.powershell.commands.pspropertyexpression", "microsoft.powershell.commands.pspropertyexpressionResult", "Member[resolvedexpression]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osdebug]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startprocesscommand", "Member[usenewenvironment]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowsserverdatacenternohypervcore]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[mediadisconnected]"]
    - ["microsoft.powershell.commands.softwareelementstate", "microsoft.powershell.commands.softwareelementstate!", "Member[running]"]
    - ["system.string[]", "microsoft.powershell.commands.testconnectioncommand", "Member[source]"]
    - ["system.object[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[nestedmodules]"]
    - ["system.guid[]", "microsoft.powershell.commands.removepssessioncommand", "Member[vmid]"]
    - ["system.int32", "microsoft.powershell.commands.restartcomputercommand", "Member[timeout]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[remotenodesessionidletimeoutsec]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setpsdebugcommand", "Member[strict]"]
    - ["system.string[]", "microsoft.powershell.commands.importpowershelldatafilecommand", "Member[path]"]
    - ["system.management.automation.psobject[]", "microsoft.powershell.commands.writeoutputcommand", "Member[inputobject]"]
    - ["system.boolean", "microsoft.powershell.commands.renameitemcommand", "Member[providersupportsshouldprocess]"]
    - ["system.string", "microsoft.powershell.commands.invokewmimethod", "Member[name]"]
    - ["system.int32", "microsoft.powershell.commands.addtypecompilererror", "Member[column]"]
    - ["system.net.webresponse", "microsoft.powershell.commands.webresponseobject", "Member[baseresponse]"]
    - ["microsoft.powershell.commands.displayhinttype", "microsoft.powershell.commands.getdatecommand", "Member[displayhint]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommandbase", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportaliascommand", "Member[append]"]
    - ["system.string[]", "microsoft.powershell.commands.getpsbreakpointcommand", "Member[command]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.connectpssessioncommand", "Member[allowredirection]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[runningorfullpower]"]
    - ["system.management.automation.errorrecord", "microsoft.powershell.commands.helpnotfoundexception", "Member[errorrecord]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[getchilditemsdynamicparameters].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[nocompression]"]
    - ["microsoft.powershell.commands.clipboardformat", "microsoft.powershell.commands.clipboardformat!", "Member[audio]"]
    - ["system.byte[]", "microsoft.powershell.commands.writeeventlogcommand", "Member[rawdata]"]
    - ["system.string", "microsoft.powershell.commands.writeeventlogcommand", "Member[message]"]
    - ["system.object", "microsoft.powershell.commands.registerobjecteventcommand", "Method[getsourceobject].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttoxmlcommand", "Member[notypeinformation]"]
    - ["system.version", "microsoft.powershell.commands.importmodulecommand", "Member[minimumversion]"]
    - ["system.int64", "microsoft.powershell.commands.registerwmieventcommand", "Member[timeout]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[irix]"]
    - ["system.boolean", "microsoft.powershell.commands.certificateprovider", "Method[haschilditems].ReturnValue"]
    - ["system.int32", "microsoft.powershell.commands.receivepssessioncommand", "Member[id]"]
    - ["microsoft.management.infrastructure.cimsession", "microsoft.powershell.commands.importmodulecommand", "Member[cimsession]"]
    - ["system.object", "microsoft.powershell.commands.addmembercommand", "Member[notepropertyvalue]"]
    - ["microsoft.powershell.commands.modulespecification[]", "microsoft.powershell.commands.importmodulecommand", "Member[fullyqualifiedname]"]
    - ["microsoft.powershell.commands.exportaliasformat", "microsoft.powershell.commands.exportaliasformat!", "Member[csv]"]
    - ["system.guid[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[instanceid]"]
    - ["system.nullable<microsoft.powershell.commands.pcsystemtype>", "microsoft.powershell.commands.computerinfo", "Member[cspcsystemtype]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxsessionsperremotenode]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.splitpathcommand", "Member[extension]"]
    - ["newtonsoft.json.stringescapehandling", "microsoft.powershell.commands.converttojsoncommand", "Member[escapehandling]"]
    - ["system.string[]", "microsoft.powershell.commands.getchilditemcommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.receivejobcommand", "Member[command]"]
    - ["system.string[]", "microsoft.powershell.commands.startjobcommand", "Member[computername]"]
    - ["system.boolean", "microsoft.powershell.commands.sessionstateproviderbase", "Method[itemexists].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider", "Method[gethelpmaml].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.gethelpcommand", "Member[component]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cgt]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[norecurse]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[header1color]"]
    - ["system.string[]", "microsoft.powershell.commands.copyitemcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.registryprovider", "Method[getparentpath].ReturnValue"]
    - ["system.management.automation.scopeditemoptions", "microsoft.powershell.commands.newvariablecommand", "Member[option]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.corecommandbase", "Member[force]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[macros]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[setpropertydynamicparameters].ReturnValue"]
    - ["system.byte", "microsoft.powershell.commands.newwineventcommand", "Member[version]"]
    - ["system.string", "microsoft.powershell.commands.groupinfo", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.enhancedkeyusagerepresentation", "Member[friendlyname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.convertfromcsvcommand", "Member[useculture]"]
    - ["microsoft.powershell.commands.waitforservicetypes", "microsoft.powershell.commands.waitforservicetypes!", "Member[powershell]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessioncommand", "Member[enablenetworkaccess]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.starttranscriptcommand", "Member[includeinvocationheader]"]
    - ["system.string", "microsoft.powershell.commands.exportaliascommand", "Member[description]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[win3x]"]
    - ["system.string[]", "microsoft.powershell.commands.getpssessioncommand", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.newobjectcommand", "Member[typename]"]
    - ["system.string[]", "microsoft.powershell.commands.importmodulecommand", "Member[variable]"]
    - ["system.string[]", "microsoft.powershell.commands.getaclcommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.openmode", "microsoft.powershell.commands.openmode!", "Member[add]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cne]"]
    - ["system.string", "microsoft.powershell.commands.moveitempropertycommand", "Member[destination]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxdisconnectedsessions]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getmembercommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[visibleexternalcommands]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[indisconnectedsession]"]
    - ["system.uri", "microsoft.powershell.commands.importmodulecommand", "Member[cimresourceuri]"]
    - ["system.management.authenticationlevel", "microsoft.powershell.commands.stopcomputercommand", "Member[dcomauthentication]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getowner].ReturnValue"]
    - ["system.management.automation.runspaces.pssession[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[session]"]
    - ["system.string[]", "microsoft.powershell.commands.sendmailmessage", "Member[cc]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[nextstep]"]
    - ["system.string", "microsoft.powershell.commands.setservicecommand", "Member[displayname]"]
    - ["system.management.automation.runspaces.pipelinestate", "microsoft.powershell.commands.historyinfo", "Member[executionstatus]"]
    - ["system.boolean", "microsoft.powershell.commands.registryprovider", "Method[isitemcontainer].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.addcomputercommand", "Member[oupath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addmembercommand", "Member[passthru]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[authenticationfailed]"]
    - ["system.int32", "microsoft.powershell.commands.writeprogresscommand", "Member[percentcomplete]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[oscsdversion]"]
    - ["system.string[]", "microsoft.powershell.commands.convertpathcommand", "Member[path]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.starttranscriptcommand", "Member[useminimalheader]"]
    - ["system.nullable<microsoft.powershell.commands.domainrole>", "microsoft.powershell.commands.computerinfo", "Member[csdomainrole]"]
    - ["microsoft.powershell.commands.clipboardformat", "microsoft.powershell.commands.clipboardformat!", "Member[text]"]
    - ["system.uri", "microsoft.powershell.commands.webrequestpscmdlet", "Member[proxy]"]
    - ["system.string[]", "microsoft.powershell.commands.startjobcommand", "Member[vmname]"]
    - ["system.string", "microsoft.powershell.commands.updatetypedatacommand", "Member[membername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.removejobcommand", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowssystemroot]"]
    - ["microsoft.powershell.commands.producttype", "microsoft.powershell.commands.producttype!", "Member[server]"]
    - ["system.collections.hashtable[]", "microsoft.powershell.commands.enterpssessioncommand", "Member[sshconnection]"]
    - ["system.string[]", "microsoft.powershell.commands.getcountercommand", "Member[listset]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[bsdunix]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[osfreephysicalmemory]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopprocesscommand", "Member[passthru]"]
    - ["system.object", "microsoft.powershell.commands.certificateprovider", "Method[getitemdynamicparameters].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.connectpssessioncommand", "Member[applicationname]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[biossmbiosmajorversion]"]
    - ["system.string[]", "microsoft.powershell.commands.importcsvcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.writeprogresscommand", "Member[activity]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powersavehibernate]"]
    - ["system.string", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[path]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[enterpriseserveria64edition]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.whereobjectcommand", "Member[inputobject]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[osdataexecutionprevention32bitapplications]"]
    - ["system.boolean", "microsoft.powershell.commands.copyitemcommand", "Member[providersupportsshouldprocess]"]
    - ["microsoft.powershell.commands.deviceguardsoftwaresecure[]", "microsoft.powershell.commands.deviceguard", "Member[securityservicesrunning]"]
    - ["system.boolean", "microsoft.powershell.commands.addtypecompilererror", "Member[iswarning]"]
    - ["system.string", "microsoft.powershell.commands.removetypedatacommand", "Member[typename]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.showcommandcommand", "Member[nocommonparameter]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttojsoncommand", "Member[compress]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[description]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxactivityprocesses]"]
    - ["system.string[]", "microsoft.powershell.commands.gettimezonecommand", "Member[id]"]
    - ["system.string[]", "microsoft.powershell.commands.receivejobcommand", "Member[location]"]
    - ["system.string", "microsoft.powershell.commands.commonrunspacecommandbase!", "Member[runspaceidparameterset]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getvariablecommand", "Member[valueonly]"]
    - ["system.int32", "microsoft.powershell.commands.getdatecommand", "Member[minute]"]
    - ["system.string", "microsoft.powershell.commands.clearitemcommand", "Member[filter]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.startprocesscommand", "Member[loaduserprofile]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[windowshomeserver]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.updatetypedatacommand", "Member[inheritpropertyserializationset]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[hp_mpe]"]
    - ["system.int32", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[throttlelimit]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[webserveredition]"]
    - ["microsoft.powershell.commands.exportaliasformat", "microsoft.powershell.commands.exportaliasformat!", "Member[script]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.receivejobcommand", "Member[autoremovejob]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommand", "Member[typedefinition]"]
    - ["system.int32", "microsoft.powershell.commands.newpsworkflowexecutionoptioncommand", "Member[maxconnectedsessions]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[workflowshutdowntimeoutmsec]"]
    - ["system.nullable<system.datetime>", "microsoft.powershell.commands.computerinfo", "Member[biosreleasedate]"]
    - ["system.diagnostics.processwindowstyle", "microsoft.powershell.commands.startprocesscommand", "Member[windowstyle]"]
    - ["system.string[]", "microsoft.powershell.commands.savehelpcommand", "Member[destinationpath]"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[errorid]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemprovider", "Method[itemexists].ReturnValue"]
    - ["system.collections.generic.dictionary<system.string,system.string>", "microsoft.powershell.commands.webresponseobject", "Member[relationlink]"]
    - ["system.string[]", "microsoft.powershell.commands.connectpssessioncommand", "Member[containerid]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.converttojsoncommand", "Member[asarray]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportclixmlcommand", "Member[noclobber]"]
    - ["system.string", "microsoft.powershell.commands.exportformatdatacommand", "Member[path]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[desktop]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[powercyclingsupported]"]
    - ["system.string", "microsoft.powershell.commands.newwebserviceproxy", "Member[namespace]"]
    - ["system.string[]", "microsoft.powershell.commands.getfilehashcommand", "Member[path]"]
    - ["system.management.automation.runspaces.pssession", "microsoft.powershell.commands.receivepssessioncommand", "Member[session]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.basecsvwritingcommand", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosdescription]"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.foreachobjectcommand", "Member[begin]"]
    - ["system.object[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[visiblecmdlets]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setaclcommand", "Member[clearcentralaccesspolicy]"]
    - ["system.management.impersonationlevel", "microsoft.powershell.commands.restartcomputercommand", "Member[impersonation]"]
    - ["system.string", "microsoft.powershell.commands.controlpanelitem", "Method[tostring].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.psremotingcmdlet!", "Member[sshhostparameterset]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.startjobcommand", "Member[credential]"]
    - ["system.string", "microsoft.powershell.commands.contentcommandbase", "Member[filter]"]
    - ["system.string", "microsoft.powershell.commands.importlocalizeddata", "Member[basedirectory]"]
    - ["system.string", "microsoft.powershell.commands.getpssessioncommand", "Member[applicationname]"]
    - ["system.object", "microsoft.powershell.commands.registryprovider", "Method[setpropertydynamicparameters].ReturnValue"]
    - ["microsoft.powershell.commands.controlpanelitem[]", "microsoft.powershell.commands.showcontrolpanelitemcommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.cpuavailability", "microsoft.powershell.commands.cpuavailability!", "Member[intest]"]
    - ["system.string", "microsoft.powershell.commands.invokeitemcommand", "Member[filter]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[dgux]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathsessionparameterset]"]
    - ["system.version", "microsoft.powershell.commands.exportpssessioncommand!", "Member[versionofscriptgenerator]"]
    - ["microsoft.powershell.commands.wmistate", "microsoft.powershell.commands.wmistate!", "Member[running]"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.stopcomputercommand", "Member[credential]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[getitemdynamicparameters].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[timezone]"]
    - ["system.management.automation.psdriveinfo", "microsoft.powershell.commands.filesystemprovider", "Method[newdrive].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.suspendjobcommand", "Member[wait]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.starttranscriptcommand", "Member[noclobber]"]
    - ["system.string", "microsoft.powershell.commands.showcommandcommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[header3color]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setexecutionpolicycommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.getcountercommand", "Member[counter]"]
    - ["system.nullable<microsoft.powershell.commands.hardwaresecurity>", "microsoft.powershell.commands.computerinfo", "Member[csadminpasswordstatus]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[author]"]
    - ["system.string", "microsoft.powershell.commands.renameitempropertycommand", "Member[name]"]
    - ["system.management.automation.remoting.sessiontype", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[sessiontype]"]
    - ["system.string", "microsoft.powershell.commands.invokerestmethodcommand", "Member[custommethod]"]
    - ["system.version", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[powershellhostversion]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csdnshostname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportaliascommand", "Member[noclobber]"]
    - ["system.collections.generic.list<microsoft.powershell.commands.pspropertyexpression>", "microsoft.powershell.commands.pspropertyexpression", "Method[resolvenames].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.pshostprocessinfo", "Member[mainwindowtitle]"]
    - ["system.string", "microsoft.powershell.commands.getwineventcommand", "Member[filterxpath]"]
    - ["system.string", "microsoft.powershell.commands.computerchangeinfo", "Method[tostring].ReturnValue"]
    - ["system.version", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[powershellversion]"]
    - ["system.string[]", "microsoft.powershell.commands.removepsdrivecommand", "Member[psprovider]"]
    - ["system.string[]", "microsoft.powershell.commands.importcsvcommand", "Member[literalpath]"]
    - ["system.string[]", "microsoft.powershell.commands.multipleservicecommandbase", "Member[suppliedcomputername]"]
    - ["system.string[]", "microsoft.powershell.commands.newservicecommand", "Member[dependson]"]
    - ["microsoft.powershell.executionpolicyscope", "microsoft.powershell.commands.getexecutionpolicycommand", "Member[scope]"]
    - ["system.guid[]", "microsoft.powershell.commands.getrunspacecommand", "Member[instanceid]"]
    - ["system.string", "microsoft.powershell.commands.joinpathcommand", "Member[childpath]"]
    - ["system.string[]", "microsoft.powershell.commands.networkadapter", "Member[ipaddresses]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[sessionthrottlelimit]"]
    - ["system.security.cryptography.x509certificates.x509certificate2", "microsoft.powershell.commands.setauthenticodesignaturecommand", "Member[certificate]"]
    - ["system.string", "microsoft.powershell.commands.writeorthrowerrorcommand", "Member[message]"]
    - ["system.string[]", "microsoft.powershell.commands.enablecomputerrestorecommand", "Member[drive]"]
    - ["system.string[]", "microsoft.powershell.commands.newitempropertycommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.invokewmimethod", "Member[path]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getexperimentalfeaturecommand", "Member[listavailable]"]
    - ["system.int32", "microsoft.powershell.commands.webrequestpscmdlet", "Member[retryintervalsec]"]
    - ["microsoft.powershell.commands.deviceguardsoftwaresecure", "microsoft.powershell.commands.deviceguardsoftwaresecure!", "Member[credentialguard]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[jobname]"]
    - ["system.collections.generic.list<microsoft.powershell.commands.enhancedkeyusagerepresentation>", "microsoft.powershell.commands.enhancedkeyusageproperty", "Member[enhancedkeyusagelist]"]
    - ["system.string", "microsoft.powershell.commands.settimezonecommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.objecteventregistrationbase", "Member[supportevent]"]
    - ["system.string", "microsoft.powershell.commands.unprotectcmsmessagecommand", "Member[literalpath]"]
    - ["system.int64", "microsoft.powershell.commands.formathex", "Member[offset]"]
    - ["system.datetime", "microsoft.powershell.commands.setdatecommand", "Member[date]"]
    - ["system.int32", "microsoft.powershell.commands.debugjobcommand", "Member[id]"]
    - ["system.guid", "microsoft.powershell.commands.enterpssessioncommand", "Member[instanceid]"]
    - ["system.string", "microsoft.powershell.commands.psuseragent!", "Member[opera]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[hpux]"]
    - ["system.int32", "microsoft.powershell.commands.psbreakpointcreationbase", "Member[column]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[win95]"]
    - ["system.string[]", "microsoft.powershell.commands.clearrecyclebincommand", "Member[driveletter]"]
    - ["system.int32", "microsoft.powershell.commands.selectobjectcommand", "Member[skiplast]"]
    - ["system.string[]", "microsoft.powershell.commands.importcountercommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.copyitempropertycommand", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getjobcommand", "Member[includechildjob]"]
    - ["system.string", "microsoft.powershell.commands.getpssessioncapabilitycommand", "Member[configurationname]"]
    - ["system.string", "microsoft.powershell.commands.selectxmlinfo", "Method[tostring].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getwmiobjectcommand", "Member[amended]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[bioscurrentlanguage]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.selectstringcommand", "Member[simplematch]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.registerengineeventcommand", "Member[sourceidentifier]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxconcurrentcommandspersession]"]
    - ["system.string", "microsoft.powershell.commands.pushlocationcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[role]"]
    - ["system.string", "microsoft.powershell.commands.geteventpssnapin", "Member[descriptionresource]"]
    - ["system.string", "microsoft.powershell.commands.showeventlogcommand", "Member[computername]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getmodulecommand", "Member[skipeditioncheck]"]
    - ["microsoft.powershell.commands.pcsystemtypeex", "microsoft.powershell.commands.pcsystemtypeex!", "Member[maximum]"]
    - ["system.string[]", "microsoft.powershell.commands.invokeitemcommand", "Member[literalpath]"]
    - ["system.diagnostics.eventlogentrytype", "microsoft.powershell.commands.writeeventlogcommand", "Member[entrytype]"]
    - ["system.string[]", "microsoft.powershell.commands.enabledisableexperimentalfeaturecommandbase", "Member[name]"]
    - ["system.codedom.compiler.compilerparameters", "microsoft.powershell.commands.addtypecommand", "Member[compilerparameters]"]
    - ["system.string[]", "microsoft.powershell.commands.getformatdatacommand", "Member[typename]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportcsvcommand", "Member[append]"]
    - ["system.string[]", "microsoft.powershell.commands.splitpathcommand", "Member[path]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[unknown]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getuniquecommand", "Member[ontype]"]
    - ["system.string", "microsoft.powershell.commands.enterpssessioncommand", "Member[computername]"]
    - ["system.management.automation.signature", "microsoft.powershell.commands.getauthenticodesignaturecommand", "Method[performaction].ReturnValue"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[ospaeenabled]"]
    - ["system.string", "microsoft.powershell.commands.unprotectcmsmessagecommand", "Member[path]"]
    - ["system.int32", "microsoft.powershell.commands.stopcomputercommand", "Member[throttlelimit]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[other]"]
    - ["system.boolean", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[runasvirtualaccount]"]
    - ["system.int64", "microsoft.powershell.commands.limiteventlogcommand", "Member[maximumsize]"]
    - ["system.string[]", "microsoft.powershell.commands.geteventpssnapin", "Member[formats]"]
    - ["system.string[]", "microsoft.powershell.commands.receivejobcommand", "Member[computername]"]
    - ["system.net.mail.mailpriority", "microsoft.powershell.commands.sendmailmessage", "Member[priority]"]
    - ["system.string[]", "microsoft.powershell.commands.commonrunspacecommandbase", "Member[runspacename]"]
    - ["system.timespan", "microsoft.powershell.commands.webresponseobject", "Member[perreadtimeout]"]
    - ["system.string", "microsoft.powershell.commands.psrunspacecmdlet!", "Member[containeridinstanceidparameterset]"]
    - ["system.int32", "microsoft.powershell.commands.writeprogresscommand", "Member[parentid]"]
    - ["microsoft.powershell.commands.dataexecutionpreventionsupportpolicy", "microsoft.powershell.commands.dataexecutionpreventionsupportpolicy!", "Member[optout]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[smallbusinessserverpremiumedition]"]
    - ["system.object[]", "microsoft.powershell.commands.updatelistcommand", "Member[replace]"]
    - ["system.object[]", "microsoft.powershell.commands.formatcustomcommand", "Member[property]"]
    - ["system.string[]", "microsoft.powershell.commands.computerinfo", "Member[ospagingfiles]"]
    - ["system.object", "microsoft.powershell.commands.setitemcommand", "Member[value]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biossmbiosbiosversion]"]
    - ["system.string", "microsoft.powershell.commands.restartcomputercommand", "Member[wsmanauthentication]"]
    - ["system.string", "microsoft.powershell.commands.newvariablecommand", "Member[description]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.addtypecommand", "Member[ignorewarnings]"]
    - ["system.string", "microsoft.powershell.commands.filesystemcontentreaderdynamicparameters", "Member[delimiter]"]
    - ["system.boolean", "microsoft.powershell.commands.certificateprovider", "Method[isvalidpath].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.importclixmlcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.basichtmlwebresponseobject", "Member[content]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.gethelpcommand", "Member[showwindow]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getcommandcommand", "Member[showcommandinfo]"]
    - ["system.object", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[variabledefinitions]"]
    - ["system.nullable<microsoft.powershell.commands.cpustatus>", "microsoft.powershell.commands.processor", "Member[cpustatus]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.getaclcommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.frontpanelresetstatus", "microsoft.powershell.commands.frontpanelresetstatus!", "Member[notimplemented]"]
    - ["system.string", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.importaliascommand", "Member[scope]"]
    - ["system.boolean", "microsoft.powershell.commands.sessionstateproviderbase", "Method[isvalidpath].ReturnValue"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[biossmbiospresent]"]
    - ["system.string[]", "microsoft.powershell.commands.showmarkdowncommand", "Member[literalpath]"]
    - ["microsoft.powershell.commands.formobject", "microsoft.powershell.commands.formobjectcollection", "Member[item]"]
    - ["system.char", "microsoft.powershell.commands.convertfromcsvcommand", "Member[delimiter]"]
    - ["system.string", "microsoft.powershell.commands.converttosecurestringcommand", "Member[string]"]
    - ["system.double", "microsoft.powershell.commands.showcommandcommand", "Member[width]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.testcomputersecurechannelcommand", "Member[repair]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommand", "Member[path]"]
    - ["system.object[]", "microsoft.powershell.commands.invokewmimethod", "Member[argumentlist]"]
    - ["system.boolean", "microsoft.powershell.commands.passthroughcontentcommandbase", "Member[providersupportsshouldprocess]"]
    - ["system.string[]", "microsoft.powershell.commands.variablecommandbase", "Member[excludefilters]"]
    - ["system.string", "microsoft.powershell.commands.writealiascommandbase", "Member[name]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[maximumenumvalue]"]
    - ["system.string", "microsoft.powershell.commands.helpcategoryinvalidexception", "Member[message]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.serviceoperationbasecommand", "Member[passthru]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csworkgroup]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[cssystemfamily]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokecommandcommand", "Member[asjob]"]
    - ["system.string", "microsoft.powershell.commands.modulespecification", "Method[tostring].ReturnValue"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getmodulecommand", "Member[listavailable]"]
    - ["system.string[]", "microsoft.powershell.commands.removemodulecommand", "Member[name]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[inferno]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.wsmanconfigurationoption", "Member[maxmemorypersessionmb]"]
    - ["system.object", "microsoft.powershell.commands.filesystemprovider", "Method[clearcontentdynamicparameters].ReturnValue"]
    - ["system.string[]", "microsoft.powershell.commands.moveitempropertycommand", "Member[path]"]
    - ["system.security.cryptography.x509certificates.x509certificatecollection", "microsoft.powershell.commands.webrequestsession", "Member[certificates]"]
    - ["system.management.automation.job[]", "microsoft.powershell.commands.resumejobcommand", "Member[job]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[passthru]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.filesystemcontentdynamicparametersbase", "Member[asbytestream]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[osf]"]
    - ["system.string", "microsoft.powershell.commands.modulespecification", "Member[name]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportformatdatacommand", "Member[includescriptblock]"]
    - ["system.int32", "microsoft.powershell.commands.getcountercommand", "Member[sampleinterval]"]
    - ["system.string", "microsoft.powershell.commands.webrequestsession", "Member[useragent]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxrunningworkflows]"]
    - ["system.codedom.compiler.codedomprovider", "microsoft.powershell.commands.addtypecommand", "Member[codedomprovider]"]
    - ["system.string[]", "microsoft.powershell.commands.matchinfocontext", "Member[precontext]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommandbase", "Member[referencedassemblies]"]
    - ["system.string[]", "microsoft.powershell.commands.getaliascommand", "Member[definition]"]
    - ["system.security.accesscontrol.objectsecurity", "microsoft.powershell.commands.registryprovider", "Method[newsecuritydescriptoroftype].ReturnValue"]
    - ["system.nullable<microsoft.powershell.commands.producttype>", "microsoft.powershell.commands.computerinfo", "Member[osproducttype]"]
    - ["system.management.automation.runspaces.pssession", "microsoft.powershell.commands.importmodulecommand", "Member[pssession]"]
    - ["system.collections.hashtable", "microsoft.powershell.commands.x509storelocation", "Member[storenames]"]
    - ["system.string[]", "microsoft.powershell.commands.getaclcommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.importworkflowcommand!", "Member[unabletostartworkflowmessagemessage]"]
    - ["system.string[]", "microsoft.powershell.commands.enablepssessionconfigurationcommand", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.getpssnapincommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.getchilditemcommand", "Member[filter]"]
    - ["system.security.accesscontrol.authorizationrulecollection", "microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getaccess].ReturnValue"]
    - ["system.version", "microsoft.powershell.commands.getformatdatacommand", "Member[powershellversion]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cnotmatch]"]
    - ["system.boolean", "microsoft.powershell.commands.clearitemcommand", "Member[providersupportsshouldprocess]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.tracecommandcommand", "Member[pshost]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.disablepsremotingcommand", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[disablekeepalive]"]
    - ["system.int32[]", "microsoft.powershell.commands.jobcmdletbase", "Member[id]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulemanifestcommand", "Member[cmdletstoexport]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[smallbusinessserverpremiumcore]"]
    - ["system.string", "microsoft.powershell.commands.setmarkdownoptioncommand", "Member[linkforegroundcolor]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[enterpriseservercoreedition]"]
    - ["microsoft.powershell.commands.joinoptions", "microsoft.powershell.commands.joinoptions!", "Member[deferspnset]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[full]"]
    - ["system.string[]", "microsoft.powershell.commands.testpathcommand", "Member[exclude]"]
    - ["system.int64", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[userdrivemaximumsize]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.stopcomputercommand", "Member[force]"]
    - ["system.string[]", "microsoft.powershell.commands.invokeitemcommand", "Member[include]"]
    - ["system.int64", "microsoft.powershell.commands.getcontentcommand", "Member[readcount]"]
    - ["system.collections.idictionary", "microsoft.powershell.commands.newpsrolecapabilityfilecommand", "Member[environmentvariables]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.textmeasureinfo", "Member[words]"]
    - ["microsoft.powershell.commands.powermanagementcapabilities", "microsoft.powershell.commands.powermanagementcapabilities!", "Member[disabled]"]
    - ["system.management.managementobject", "microsoft.powershell.commands.setwmiinstance", "Member[inputobject]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osname]"]
    - ["system.string", "microsoft.powershell.commands.processor", "Member[processorid]"]
    - ["system.string", "microsoft.powershell.commands.filesystemprovider!", "Method[modewithouthardlink].ReturnValue"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[cspartofdomain]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.wmibasecmdlet", "Member[asjob]"]
    - ["system.threading.apartmentstate", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[threadapartmentstate]"]
    - ["system.string", "microsoft.powershell.commands.formobject", "Member[action]"]
    - ["system.int32", "microsoft.powershell.commands.foreachobjectcommand", "Member[throttlelimit]"]
    - ["system.boolean", "microsoft.powershell.commands.newpsdrivecommand", "Member[providersupportsshouldprocess]"]
    - ["system.datetime", "microsoft.powershell.commands.newtimespancommand", "Member[start]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.processor", "Member[currentclockspeed]"]
    - ["system.int32[]", "microsoft.powershell.commands.selectstringcommand", "Member[context]"]
    - ["system.int32", "microsoft.powershell.commands.limiteventlogcommand", "Member[retentiondays]"]
    - ["system.string", "microsoft.powershell.commands.hotfix", "Member[description]"]
    - ["system.string[]", "microsoft.powershell.commands.removeeventlogcommand", "Member[source]"]
    - ["system.string[]", "microsoft.powershell.commands.selectxmlcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.tracecommandcommand", "Member[command]"]
    - ["system.string", "microsoft.powershell.commands.measureinfo", "Member[property]"]
    - ["system.string", "microsoft.powershell.commands.controlpanelitem", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.getculturecommand", "Member[name]"]
    - ["system.boolean", "microsoft.powershell.commands.passthroughitempropertycommandbase", "Member[providersupportsshouldprocess]"]
    - ["system.string", "microsoft.powershell.commands.registerobjecteventcommand", "Member[eventname]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[cshypervisorpresent]"]
    - ["system.string", "microsoft.powershell.commands.copyitemcommand", "Member[destination]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[hardwarenotpresent]"]
    - ["system.string", "microsoft.powershell.commands.selectxmlinfo", "Member[pattern]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportaliascommand", "Member[force]"]
    - ["system.int32", "microsoft.powershell.commands.newpssessionoptioncommand", "Member[operationtimeout]"]
    - ["system.string", "microsoft.powershell.commands.importworkflowcommand!", "Member[invalidpsparametercollectionentryerrormessage]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.invokerestmethodcommand", "Member[followrellink]"]
    - ["system.string", "microsoft.powershell.commands.startjobcommand", "Member[applicationname]"]
    - ["system.string", "microsoft.powershell.commands.psexecutioncmdlet!", "Member[filepathvmidparameterset]"]
    - ["system.string[]", "microsoft.powershell.commands.neweventlogcommand", "Member[source]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[osbuildtype]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[invalidaddress]"]
    - ["system.string", "microsoft.powershell.commands.newpsdrivecommand", "Member[scope]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.restartservicecommand", "Member[force]"]
    - ["system.boolean", "microsoft.powershell.commands.filesystemprovider", "Method[isitemcontainer].ReturnValue"]
    - ["system.string", "microsoft.powershell.commands.gethelpcodemethods!", "Method[gethelpuri].ReturnValue"]
    - ["system.management.automation.pscredential", "microsoft.powershell.commands.addcomputercommand", "Member[unjoindomaincredential]"]
    - ["system.net.icredentials", "microsoft.powershell.commands.webrequestsession", "Member[credentials]"]
    - ["system.string", "microsoft.powershell.commands.startprocesscommand", "Member[redirectstandardoutput]"]
    - ["system.type", "microsoft.powershell.commands.updatetypedatacommand", "Member[typeconverter]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[dc_os]"]
    - ["system.string[]", "microsoft.powershell.commands.addtypecommandbase", "Member[usingnamespace]"]
    - ["system.string", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[startupscript]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.registerobjecteventcommand", "Member[inputobject]"]
    - ["system.int64[]", "microsoft.powershell.commands.geteventlogcommand", "Member[instanceid]"]
    - ["system.string", "microsoft.powershell.commands.memberdefinition", "Member[name]"]
    - ["system.string[]", "microsoft.powershell.commands.getwineventcommand", "Member[listprovider]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[storageenterpriseserveredition]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getculturecommand", "Member[listavailable]"]
    - ["microsoft.powershell.commands.powerplatformrole", "microsoft.powershell.commands.powerplatformrole!", "Member[enterpriseserver]"]
    - ["system.management.automation.runspaces.pssessiontype", "microsoft.powershell.commands.registerpssessionconfigurationcommand", "Member[sessiontype]"]
    - ["system.string[]", "microsoft.powershell.commands.gethotfixcommand", "Member[computername]"]
    - ["system.string", "microsoft.powershell.commands.registerengineeventcommand", "Method[getsourceobjecteventname].ReturnValue"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[vm_esa]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csusername]"]
    - ["system.string[]", "microsoft.powershell.commands.newmodulecommand", "Member[function]"]
    - ["system.object", "microsoft.powershell.commands.setitempropertycommand", "Member[value]"]
    - ["system.int32", "microsoft.powershell.commands.clearhistorycommand", "Member[count]"]
    - ["system.string", "microsoft.powershell.commands.securitydescriptorinfo", "Member[group]"]
    - ["system.string", "microsoft.powershell.commands.invokecommandcommand", "Member[filepath]"]
    - ["system.boolean", "microsoft.powershell.commands.computerchangeinfo", "Member[hassucceeded]"]
    - ["microsoft.powershell.commands.webauthenticationtype", "microsoft.powershell.commands.webauthenticationtype!", "Member[none]"]
    - ["microsoft.powershell.commands.testpathtype", "microsoft.powershell.commands.testpathcommand", "Member[pathtype]"]
    - ["system.int32", "microsoft.powershell.commands.selectobjectcommand", "Member[first]"]
    - ["system.diagnostics.process[]", "microsoft.powershell.commands.processbasecommand", "Member[inputobject]"]
    - ["system.datetime", "microsoft.powershell.commands.historyinfo", "Member[endexecutiontime]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.exportconsolecommand", "Member[force]"]
    - ["system.boolean", "microsoft.powershell.commands.matchinfo", "Member[ignorecase]"]
    - ["system.int32", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[maxconnectedsessions]"]
    - ["microsoft.powershell.commands.powerstate", "microsoft.powershell.commands.powerstate!", "Member[powersaveunknown]"]
    - ["microsoft.powershell.commands.clipboardformat", "microsoft.powershell.commands.clipboardformat!", "Member[filedroplist]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[force]"]
    - ["system.string", "microsoft.powershell.commands.newitemcommand", "Member[name]"]
    - ["system.uint32", "microsoft.powershell.commands.getchilditemcommand", "Member[depth]"]
    - ["system.string[]", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[outofprocessactivity]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[allowunencryptedauthentication]"]
    - ["microsoft.powershell.commands.cpustatus", "microsoft.powershell.commands.cpustatus!", "Member[idle]"]
    - ["system.nullable<system.uint32>", "microsoft.powershell.commands.computerinfo", "Member[osnumberoflicensedusers]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cle]"]
    - ["system.string", "microsoft.powershell.commands.clearitempropertycommand", "Member[name]"]
    - ["system.nullable<system.int32>", "microsoft.powershell.commands.getrandomcommand", "Member[setseed]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.webrequestpscmdlet", "Member[usedefaultcredentials]"]
    - ["microsoft.powershell.commands.websslprotocol", "microsoft.powershell.commands.websslprotocol!", "Member[tls13]"]
    - ["system.string[]", "microsoft.powershell.commands.psworkflowexecutionoption", "Member[allowedactivity]"]
    - ["system.string[]", "microsoft.powershell.commands.getvariablecommand", "Member[include]"]
    - ["system.string[]", "microsoft.powershell.commands.disconnectpssessioncommand", "Member[vmname]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[tandemnsk]"]
    - ["system.string", "microsoft.powershell.commands.writeeventlogcommand", "Member[logname]"]
    - ["system.string", "microsoft.powershell.commands.environmentprovider!", "Member[providername]"]
    - ["system.string[]", "microsoft.powershell.commands.removeitempropertycommand", "Member[literalpath]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.updatehelpcommand", "Member[recurse]"]
    - ["system.string", "microsoft.powershell.commands.starttranscriptcommand", "Member[outputdirectory]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.genericobjectmeasureinfo", "Member[standarddeviation]"]
    - ["microsoft.powershell.commands.netconnectionstatus", "microsoft.powershell.commands.netconnectionstatus!", "Member[authenticationsucceeded]"]
    - ["system.boolean", "microsoft.powershell.commands.modulespecification!", "Method[tryparse].ReturnValue"]
    - ["microsoft.powershell.commands.resetcapability", "microsoft.powershell.commands.resetcapability!", "Member[unknown]"]
    - ["system.string", "microsoft.powershell.commands.webrequestpscmdlet", "Member[transferencoding]"]
    - ["system.string", "microsoft.powershell.commands.enterpshostprocesscommand", "Member[custompipename]"]
    - ["system.string[]", "microsoft.powershell.commands.gethotfixcommand", "Member[description]"]
    - ["system.string[]", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[variable]"]
    - ["system.string", "microsoft.powershell.commands.enterpssessioncommand", "Member[configurationname]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.whereobjectcommand", "Member[cnotlike]"]
    - ["system.nullable<microsoft.powershell.commands.operatingsystemsku>", "microsoft.powershell.commands.computerinfo", "Member[osoperatingsystemsku]"]
    - ["system.string", "microsoft.powershell.commands.getwmiobjectcommand", "Member[query]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[windowsversion]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.updatablehelpcommandbase", "Member[force]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.getculturecommand", "Member[nouseroverrides]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.gethelpcommand", "Member[online]"]
    - ["microsoft.powershell.commands.matchinfocontext", "microsoft.powershell.commands.matchinfo", "Member[context]"]
    - ["system.string", "microsoft.powershell.commands.utilityresources!", "Member[pathdoesnotexist]"]
    - ["microsoft.powershell.commands.ostype", "microsoft.powershell.commands.ostype!", "Member[mvs]"]
    - ["system.string[]", "microsoft.powershell.commands.contentcommandbase", "Member[include]"]
    - ["system.nullable<system.boolean>", "microsoft.powershell.commands.computerinfo", "Member[csbootromsupported]"]
    - ["system.nullable<system.uint16>", "microsoft.powershell.commands.computerinfo", "Member[osservicepackminorversion]"]
    - ["system.string[]", "microsoft.powershell.commands.getprocesscommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.selectobjectcommand", "Member[expandproperty]"]
    - ["system.string", "microsoft.powershell.commands.exportclixmlcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.registerwmieventcommand", "Member[class]"]
    - ["system.windows.forms.textdataformat", "microsoft.powershell.commands.getclipboardcommand", "Member[textformattype]"]
    - ["system.string[]", "microsoft.powershell.commands.getchilditemcommand", "Member[include]"]
    - ["microsoft.powershell.commands.pcsystemtype", "microsoft.powershell.commands.pcsystemtype!", "Member[mobile]"]
    - ["system.string[]", "microsoft.powershell.commands.testconnectioncommand", "Member[targetname]"]
    - ["system.string", "microsoft.powershell.commands.getcredentialcommand", "Member[username]"]
    - ["system.object", "microsoft.powershell.commands.getrandomcommand", "Member[maximum]"]
    - ["system.management.automation.switchparameter", "microsoft.powershell.commands.geteventlogcommand", "Member[asbaseobject]"]
    - ["system.string", "microsoft.powershell.commands.memberdefinition", "Method[tostring].ReturnValue"]
    - ["system.management.automation.scriptblock", "microsoft.powershell.commands.setpsbreakpointcommand", "Member[action]"]
    - ["system.string", "microsoft.powershell.commands.addtypecommandbase", "Member[namespace]"]
    - ["system.management.automation.psobject", "microsoft.powershell.commands.exportcsvcommand", "Member[inputobject]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[webservercore]"]
    - ["system.string", "microsoft.powershell.commands.renameitempropertycommand", "Member[path]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[csmodel]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[standardservercoreedition]"]
    - ["system.string[]", "microsoft.powershell.commands.formathex", "Member[path]"]
    - ["microsoft.powershell.commands.websslprotocol", "microsoft.powershell.commands.webrequestpscmdlet", "Member[sslprotocol]"]
    - ["system.nullable<system.uint64>", "microsoft.powershell.commands.computerinfo", "Member[osmaxprocessmemorysize]"]
    - ["system.string[]", "microsoft.powershell.commands.removepssnapincommand", "Member[name]"]
    - ["system.string", "microsoft.powershell.commands.receivejobcommand!", "Member[locationparameterset]"]
    - ["system.string", "microsoft.powershell.commands.computerinfo", "Member[biosseralnumber]"]
    - ["microsoft.powershell.commands.hardwaresecurity", "microsoft.powershell.commands.hardwaresecurity!", "Member[unknown]"]
    - ["system.string[]", "microsoft.powershell.commands.savehelpcommand", "Member[literalpath]"]
    - ["system.string", "microsoft.powershell.commands.starttranscriptcommand", "Member[literalpath]"]
    - ["system.nullable<microsoft.powershell.commands.deviceguardsmartstatus>", "microsoft.powershell.commands.computerinfo", "Member[deviceguardsmartstatus]"]
    - ["system.collections.idictionary[]", "microsoft.powershell.commands.newpssessionconfigurationfilecommand", "Member[functiondefinitions]"]
    - ["system.management.automation.scriptblock[]", "microsoft.powershell.commands.foreachobjectcommand", "Member[process]"]
    - ["system.string", "microsoft.powershell.commands.exportaliascommand", "Member[path]"]
    - ["system.nullable<system.double>", "microsoft.powershell.commands.pssessionconfigurationcommandbase", "Member[maximumreceiveddatasizepercommandmb]"]
    - ["system.string", "microsoft.powershell.commands.setwmiinstance", "Member[class]"]
    - ["microsoft.powershell.commands.operatingsystemsku", "microsoft.powershell.commands.operatingsystemsku!", "Member[smallbusinessserveredition]"]
    - ["system.int32[]", "microsoft.powershell.commands.psrunspacecmdlet", "Member[id]"]

  - addsTo:
      pack: microsoft/powershell-all
      extensible: summaryModel
    data:
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[basichtmlwebresponseobject]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[get_images]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[get_inputfields]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[get_links]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[0].Element", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[1].Element", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[get_ascii]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[get_hexbytes]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.commonrunspacecommandbase", "Method[getdebuggerfromrunspace]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.commonrunspacecommandbase", "Method[getrunspaces]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.corecommandbase", "Method[get_retrieveddynamicparameters]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.filesystemprovider!", "Method[namestring]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.formobject", "Method[formobject]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.formobject", "Method[formobject]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.formobject", "Method[formobject]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.formobjectcollection", "Method[get_item]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.getjobcommand", "Method[findjobs]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpcategoryinvalidexception", "Method[get_helpcategory]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpcategoryinvalidexception", "Method[get_message]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpcategoryinvalidexception", "Method[helpcategoryinvalidexception]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.helpnotfoundexception", "Method[get_helptopic]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpnotfoundexception", "Method[get_message]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpnotfoundexception", "Method[helpnotfoundexception]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.historyinfo", "Method[clone]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.historyinfo", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.httpresponseexception", "Method[httpresponseexception]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[gettarget]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[resolvedtarget]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.jsonobject!", "Method[convertfromjson]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.jsonobject!", "Method[converttojson]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfo", "Method[relativepath]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfo", "Method[toemphasizedstring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfo", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfocontext", "Method[clone]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[memberdefinition]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[memberdefinition]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[memberdefinition]", "Argument[3]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.modulespecification", "Method[modulespecification]", "Argument[0].Element", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.modulespecification", "Method[modulespecification]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.modulespecification", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.objecteventregistrationbase", "Method[get_newsubscriber]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.objecteventregistrationbase", "Method[getsourceobject]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.objecteventregistrationbase", "Method[getsourceobjecteventname]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pshostprocessinfo", "Method[getpipenamefilepath]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[getvalues]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[pspropertyexpression]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[resolvenames]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpressionresult", "Method[pspropertyexpressionresult]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpressionresult", "Method[pspropertyexpressionresult]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpressionresult", "Method[pspropertyexpressionresult]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.psremotingbasecmdlet", "Method[parsesshhostname]", "Argument[0]", "Argument[1]", "taint"]
      - ["microsoft.powershell.commands.psremotingbasecmdlet", "Method[parsesshhostname]", "Argument[0]", "Argument[2]", "taint"]
      - ["microsoft.powershell.commands.psremotingbasecmdlet", "Method[parsesshhostname]", "Argument[this]", "Argument[2]", "taint"]
      - ["microsoft.powershell.commands.psremotingcmdlet", "Method[resolveappname]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psremotingcmdlet", "Method[resolvecomputername]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psremotingcmdlet", "Method[resolveshell]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspaces]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspacesbyname]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspacesbyrunspaceid]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacedebug", "Method[psrunspacedebug]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.securestringcommandbase", "Method[securestringcommandbase]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getpath]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.selectxmlinfo", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.signaturecommandsbase", "Method[performaction]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.signaturecommandsbase", "Method[signaturecommandsbase]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webcmdletelementcollection", "Method[find]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webcmdletelementcollection", "Method[findbyid]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webcmdletelementcollection", "Method[findbyname]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[3]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[basichtmlwebresponseobject]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[get_images]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[get_inputfields]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.basichtmlwebresponseobject", "Method[get_links]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[0].Element", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[1].Element", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[bytecollection]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[get_ascii]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.bytecollection", "Method[get_hexbytes]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.commonrunspacecommandbase", "Method[getdebuggerfromrunspace]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.commonrunspacecommandbase", "Method[getrunspaces]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.corecommandbase", "Method[get_retrieveddynamicparameters]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.filesystemprovider!", "Method[namestring]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.formobject", "Method[formobject]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.formobject", "Method[formobject]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.formobject", "Method[formobject]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.formobjectcollection", "Method[get_item]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.getjobcommand", "Method[findjobs]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpcategoryinvalidexception", "Method[get_helpcategory]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpcategoryinvalidexception", "Method[get_message]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpcategoryinvalidexception", "Method[helpcategoryinvalidexception]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.helpnotfoundexception", "Method[get_helptopic]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpnotfoundexception", "Method[get_message]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.helpnotfoundexception", "Method[helpnotfoundexception]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.historyinfo", "Method[clone]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.historyinfo", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.httpresponseexception", "Method[httpresponseexception]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[gettarget]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.internalsymboliclinklinkcodemethods!", "Method[resolvedtarget]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.jsonobject!", "Method[convertfromjson]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.jsonobject!", "Method[converttojson]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfo", "Method[relativepath]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfo", "Method[toemphasizedstring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfo", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.matchinfocontext", "Method[clone]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[memberdefinition]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[memberdefinition]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[memberdefinition]", "Argument[3]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.memberdefinition", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.modulespecification", "Method[modulespecification]", "Argument[0].Element", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.modulespecification", "Method[modulespecification]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.modulespecification", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.objecteventregistrationbase", "Method[get_newsubscriber]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.objecteventregistrationbase", "Method[getsourceobject]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.objecteventregistrationbase", "Method[getsourceobjecteventname]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pshostprocessinfo", "Method[getpipenamefilepath]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[getvalues]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[pspropertyexpression]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[resolvenames]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpression", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpressionresult", "Method[pspropertyexpressionresult]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpressionresult", "Method[pspropertyexpressionresult]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.pspropertyexpressionresult", "Method[pspropertyexpressionresult]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.psremotingbasecmdlet", "Method[parsesshhostname]", "Argument[0]", "Argument[1]", "taint"]
      - ["microsoft.powershell.commands.psremotingbasecmdlet", "Method[parsesshhostname]", "Argument[0]", "Argument[2]", "taint"]
      - ["microsoft.powershell.commands.psremotingbasecmdlet", "Method[parsesshhostname]", "Argument[this]", "Argument[2]", "taint"]
      - ["microsoft.powershell.commands.psremotingcmdlet", "Method[resolveappname]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psremotingcmdlet", "Method[resolvecomputername]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psremotingcmdlet", "Method[resolveshell]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspaces]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspacesbyname]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacecmdlet", "Method[getmatchingrunspacesbyrunspaceid]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.psrunspacedebug", "Method[psrunspacedebug]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.securestringcommandbase", "Method[securestringcommandbase]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.securitydescriptorcommandsbase!", "Method[getpath]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.selectxmlinfo", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.signaturecommandsbase", "Method[performaction]", "Argument[0]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.signaturecommandsbase", "Method[signaturecommandsbase]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webcmdletelementcollection", "Method[find]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webcmdletelementcollection", "Method[findbyid]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webcmdletelementcollection", "Method[findbyname]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[tostring]", "Argument[this]", "ReturnValue", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[0]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[1]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[2]", "Argument[this]", "taint"]
      - ["microsoft.powershell.commands.webresponseobject", "Method[webresponseobject]", "Argument[3]", "Argument[this]", "taint"]